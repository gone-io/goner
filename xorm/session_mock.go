// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -package xorm -destination=./session_mock.go -source interface.go Session
//

// Package xorm is a generated GoMock package.
package xorm

import (
	context "context"
	sql "database/sql"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
	xorm "xorm.io/xorm"
	caches "xorm.io/xorm/caches"
	contexts "xorm.io/xorm/contexts"
	dialects "xorm.io/xorm/dialects"
	log "xorm.io/xorm/log"
	names "xorm.io/xorm/names"
	schemas "xorm.io/xorm/schemas"
)

// MockEngine is a mock of Engine interface.
type MockEngine struct {
	ctrl     *gomock.Controller
	recorder *MockEngineMockRecorder
	isgomock struct{}
}

// MockEngineMockRecorder is the mock recorder for MockEngine.
type MockEngineMockRecorder struct {
	mock *MockEngine
}

// NewMockEngine creates a new mock instance.
func NewMockEngine(ctrl *gomock.Controller) *MockEngine {
	mock := &MockEngine{ctrl: ctrl}
	mock.recorder = &MockEngineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEngine) EXPECT() *MockEngineMockRecorder {
	return m.recorder
}

// AddHook mocks base method.
func (m *MockEngine) AddHook(hook contexts.Hook) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddHook", hook)
}

// AddHook indicates an expected call of AddHook.
func (mr *MockEngineMockRecorder) AddHook(hook any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHook", reflect.TypeOf((*MockEngine)(nil).AddHook), hook)
}

// Alias mocks base method.
func (m *MockEngine) Alias(alias string) *xorm.Session {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Alias", alias)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// Alias indicates an expected call of Alias.
func (mr *MockEngineMockRecorder) Alias(alias any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Alias", reflect.TypeOf((*MockEngine)(nil).Alias), alias)
}

// AllCols mocks base method.
func (m *MockEngine) AllCols() *xorm.Session {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllCols")
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// AllCols indicates an expected call of AllCols.
func (mr *MockEngineMockRecorder) AllCols() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllCols", reflect.TypeOf((*MockEngine)(nil).AllCols))
}

// Asc mocks base method.
func (m *MockEngine) Asc(colNames ...string) *xorm.Session {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range colNames {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Asc", varargs...)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// Asc indicates an expected call of Asc.
func (mr *MockEngineMockRecorder) Asc(colNames ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Asc", reflect.TypeOf((*MockEngine)(nil).Asc), colNames...)
}

// Before mocks base method.
func (m *MockEngine) Before(arg0 func(any)) *xorm.Session {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Before", arg0)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// Before indicates an expected call of Before.
func (mr *MockEngineMockRecorder) Before(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Before", reflect.TypeOf((*MockEngine)(nil).Before), arg0)
}

// BufferSize mocks base method.
func (m *MockEngine) BufferSize(size int) *xorm.Session {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BufferSize", size)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// BufferSize indicates an expected call of BufferSize.
func (mr *MockEngineMockRecorder) BufferSize(size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BufferSize", reflect.TypeOf((*MockEngine)(nil).BufferSize), size)
}

// Charset mocks base method.
func (m *MockEngine) Charset(charset string) *xorm.Session {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Charset", charset)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// Charset indicates an expected call of Charset.
func (mr *MockEngineMockRecorder) Charset(charset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Charset", reflect.TypeOf((*MockEngine)(nil).Charset), charset)
}

// ClearCache mocks base method.
func (m *MockEngine) ClearCache(arg0 ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ClearCache", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearCache indicates an expected call of ClearCache.
func (mr *MockEngineMockRecorder) ClearCache(arg0 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearCache", reflect.TypeOf((*MockEngine)(nil).ClearCache), arg0...)
}

// Cols mocks base method.
func (m *MockEngine) Cols(columns ...string) *xorm.Session {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range columns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Cols", varargs...)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// Cols indicates an expected call of Cols.
func (mr *MockEngineMockRecorder) Cols(columns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cols", reflect.TypeOf((*MockEngine)(nil).Cols), columns...)
}

// Context mocks base method.
func (m *MockEngine) Context(arg0 context.Context) *xorm.Session {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context", arg0)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockEngineMockRecorder) Context(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockEngine)(nil).Context), arg0)
}

// Count mocks base method.
func (m *MockEngine) Count(arg0 ...any) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Count", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockEngineMockRecorder) Count(arg0 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockEngine)(nil).Count), arg0...)
}

// CreateIndexes mocks base method.
func (m *MockEngine) CreateIndexes(bean any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIndexes", bean)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateIndexes indicates an expected call of CreateIndexes.
func (mr *MockEngineMockRecorder) CreateIndexes(bean any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIndexes", reflect.TypeOf((*MockEngine)(nil).CreateIndexes), bean)
}

// CreateTables mocks base method.
func (m *MockEngine) CreateTables(arg0 ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTables", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTables indicates an expected call of CreateTables.
func (mr *MockEngineMockRecorder) CreateTables(arg0 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTables", reflect.TypeOf((*MockEngine)(nil).CreateTables), arg0...)
}

// CreateUniques mocks base method.
func (m *MockEngine) CreateUniques(bean any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUniques", bean)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUniques indicates an expected call of CreateUniques.
func (mr *MockEngineMockRecorder) CreateUniques(bean any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUniques", reflect.TypeOf((*MockEngine)(nil).CreateUniques), bean)
}

// DBMetas mocks base method.
func (m *MockEngine) DBMetas() ([]*schemas.Table, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DBMetas")
	ret0, _ := ret[0].([]*schemas.Table)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DBMetas indicates an expected call of DBMetas.
func (mr *MockEngineMockRecorder) DBMetas() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DBMetas", reflect.TypeOf((*MockEngine)(nil).DBMetas))
}

// DBVersion mocks base method.
func (m *MockEngine) DBVersion() (*schemas.Version, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DBVersion")
	ret0, _ := ret[0].(*schemas.Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DBVersion indicates an expected call of DBVersion.
func (mr *MockEngineMockRecorder) DBVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DBVersion", reflect.TypeOf((*MockEngine)(nil).DBVersion))
}

// Decr mocks base method.
func (m *MockEngine) Decr(column string, arg ...any) *xorm.Session {
	m.ctrl.T.Helper()
	varargs := []any{column}
	for _, a := range arg {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Decr", varargs...)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// Decr indicates an expected call of Decr.
func (mr *MockEngineMockRecorder) Decr(column any, arg ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{column}, arg...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decr", reflect.TypeOf((*MockEngine)(nil).Decr), varargs...)
}

// Delete mocks base method.
func (m *MockEngine) Delete(arg0 ...any) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockEngineMockRecorder) Delete(arg0 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockEngine)(nil).Delete), arg0...)
}

// Desc mocks base method.
func (m *MockEngine) Desc(arg0 ...string) *xorm.Session {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Desc", varargs...)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// Desc indicates an expected call of Desc.
func (mr *MockEngineMockRecorder) Desc(arg0 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Desc", reflect.TypeOf((*MockEngine)(nil).Desc), arg0...)
}

// Dialect mocks base method.
func (m *MockEngine) Dialect() dialects.Dialect {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dialect")
	ret0, _ := ret[0].(dialects.Dialect)
	return ret0
}

// Dialect indicates an expected call of Dialect.
func (mr *MockEngineMockRecorder) Dialect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dialect", reflect.TypeOf((*MockEngine)(nil).Dialect))
}

// Distinct mocks base method.
func (m *MockEngine) Distinct(columns ...string) *xorm.Session {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range columns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Distinct", varargs...)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// Distinct indicates an expected call of Distinct.
func (mr *MockEngineMockRecorder) Distinct(columns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Distinct", reflect.TypeOf((*MockEngine)(nil).Distinct), columns...)
}

// DriverName mocks base method.
func (m *MockEngine) DriverName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DriverName")
	ret0, _ := ret[0].(string)
	return ret0
}

// DriverName indicates an expected call of DriverName.
func (mr *MockEngineMockRecorder) DriverName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DriverName", reflect.TypeOf((*MockEngine)(nil).DriverName))
}

// DropIndexes mocks base method.
func (m *MockEngine) DropIndexes(bean any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropIndexes", bean)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropIndexes indicates an expected call of DropIndexes.
func (mr *MockEngineMockRecorder) DropIndexes(bean any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropIndexes", reflect.TypeOf((*MockEngine)(nil).DropIndexes), bean)
}

// DropTables mocks base method.
func (m *MockEngine) DropTables(arg0 ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DropTables", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropTables indicates an expected call of DropTables.
func (mr *MockEngineMockRecorder) DropTables(arg0 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropTables", reflect.TypeOf((*MockEngine)(nil).DropTables), arg0...)
}

// DumpAllToFile mocks base method.
func (m *MockEngine) DumpAllToFile(fp string, tp ...schemas.DBType) error {
	m.ctrl.T.Helper()
	varargs := []any{fp}
	for _, a := range tp {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DumpAllToFile", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DumpAllToFile indicates an expected call of DumpAllToFile.
func (mr *MockEngineMockRecorder) DumpAllToFile(fp any, tp ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{fp}, tp...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DumpAllToFile", reflect.TypeOf((*MockEngine)(nil).DumpAllToFile), varargs...)
}

// EnableSessionID mocks base method.
func (m *MockEngine) EnableSessionID(arg0 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EnableSessionID", arg0)
}

// EnableSessionID indicates an expected call of EnableSessionID.
func (mr *MockEngineMockRecorder) EnableSessionID(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableSessionID", reflect.TypeOf((*MockEngine)(nil).EnableSessionID), arg0)
}

// Exec mocks base method.
func (m *MockEngine) Exec(sqlOrArgs ...any) (sql.Result, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range sqlOrArgs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockEngineMockRecorder) Exec(sqlOrArgs ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockEngine)(nil).Exec), sqlOrArgs...)
}

// Exist mocks base method.
func (m *MockEngine) Exist(bean ...any) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range bean {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exist", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exist indicates an expected call of Exist.
func (mr *MockEngineMockRecorder) Exist(bean ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exist", reflect.TypeOf((*MockEngine)(nil).Exist), bean...)
}

// Find mocks base method.
func (m *MockEngine) Find(arg0 any, arg1 ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Find", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Find indicates an expected call of Find.
func (mr *MockEngineMockRecorder) Find(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockEngine)(nil).Find), varargs...)
}

// FindAndCount mocks base method.
func (m *MockEngine) FindAndCount(arg0 any, arg1 ...any) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindAndCount", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAndCount indicates an expected call of FindAndCount.
func (mr *MockEngineMockRecorder) FindAndCount(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAndCount", reflect.TypeOf((*MockEngine)(nil).FindAndCount), varargs...)
}

// Get mocks base method.
func (m *MockEngine) Get(arg0 ...any) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockEngineMockRecorder) Get(arg0 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockEngine)(nil).Get), arg0...)
}

// GetCacher mocks base method.
func (m *MockEngine) GetCacher(arg0 string) caches.Cacher {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCacher", arg0)
	ret0, _ := ret[0].(caches.Cacher)
	return ret0
}

// GetCacher indicates an expected call of GetCacher.
func (mr *MockEngineMockRecorder) GetCacher(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCacher", reflect.TypeOf((*MockEngine)(nil).GetCacher), arg0)
}

// GetColumnMapper mocks base method.
func (m *MockEngine) GetColumnMapper() names.Mapper {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetColumnMapper")
	ret0, _ := ret[0].(names.Mapper)
	return ret0
}

// GetColumnMapper indicates an expected call of GetColumnMapper.
func (mr *MockEngineMockRecorder) GetColumnMapper() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetColumnMapper", reflect.TypeOf((*MockEngine)(nil).GetColumnMapper))
}

// GetDefaultCacher mocks base method.
func (m *MockEngine) GetDefaultCacher() caches.Cacher {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultCacher")
	ret0, _ := ret[0].(caches.Cacher)
	return ret0
}

// GetDefaultCacher indicates an expected call of GetDefaultCacher.
func (mr *MockEngineMockRecorder) GetDefaultCacher() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultCacher", reflect.TypeOf((*MockEngine)(nil).GetDefaultCacher))
}

// GetOriginEngine mocks base method.
func (m *MockEngine) GetOriginEngine() xorm.EngineInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOriginEngine")
	ret0, _ := ret[0].(xorm.EngineInterface)
	return ret0
}

// GetOriginEngine indicates an expected call of GetOriginEngine.
func (mr *MockEngineMockRecorder) GetOriginEngine() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOriginEngine", reflect.TypeOf((*MockEngine)(nil).GetOriginEngine))
}

// GetTZDatabase mocks base method.
func (m *MockEngine) GetTZDatabase() *time.Location {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTZDatabase")
	ret0, _ := ret[0].(*time.Location)
	return ret0
}

// GetTZDatabase indicates an expected call of GetTZDatabase.
func (mr *MockEngineMockRecorder) GetTZDatabase() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTZDatabase", reflect.TypeOf((*MockEngine)(nil).GetTZDatabase))
}

// GetTZLocation mocks base method.
func (m *MockEngine) GetTZLocation() *time.Location {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTZLocation")
	ret0, _ := ret[0].(*time.Location)
	return ret0
}

// GetTZLocation indicates an expected call of GetTZLocation.
func (mr *MockEngineMockRecorder) GetTZLocation() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTZLocation", reflect.TypeOf((*MockEngine)(nil).GetTZLocation))
}

// GetTableMapper mocks base method.
func (m *MockEngine) GetTableMapper() names.Mapper {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTableMapper")
	ret0, _ := ret[0].(names.Mapper)
	return ret0
}

// GetTableMapper indicates an expected call of GetTableMapper.
func (mr *MockEngineMockRecorder) GetTableMapper() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTableMapper", reflect.TypeOf((*MockEngine)(nil).GetTableMapper))
}

// GroupBy mocks base method.
func (m *MockEngine) GroupBy(keys string) *xorm.Session {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupBy", keys)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// GroupBy indicates an expected call of GroupBy.
func (mr *MockEngineMockRecorder) GroupBy(keys any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupBy", reflect.TypeOf((*MockEngine)(nil).GroupBy), keys)
}

// ID mocks base method.
func (m *MockEngine) ID(arg0 any) *xorm.Session {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID", arg0)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockEngineMockRecorder) ID(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockEngine)(nil).ID), arg0)
}

// ImportFile mocks base method.
func (m *MockEngine) ImportFile(fp string) ([]sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportFile", fp)
	ret0, _ := ret[0].([]sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportFile indicates an expected call of ImportFile.
func (mr *MockEngineMockRecorder) ImportFile(fp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportFile", reflect.TypeOf((*MockEngine)(nil).ImportFile), fp)
}

// In mocks base method.
func (m *MockEngine) In(arg0 string, arg1 ...any) *xorm.Session {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "In", varargs...)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// In indicates an expected call of In.
func (mr *MockEngineMockRecorder) In(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "In", reflect.TypeOf((*MockEngine)(nil).In), varargs...)
}

// Incr mocks base method.
func (m *MockEngine) Incr(column string, arg ...any) *xorm.Session {
	m.ctrl.T.Helper()
	varargs := []any{column}
	for _, a := range arg {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Incr", varargs...)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// Incr indicates an expected call of Incr.
func (mr *MockEngineMockRecorder) Incr(column any, arg ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{column}, arg...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Incr", reflect.TypeOf((*MockEngine)(nil).Incr), varargs...)
}

// Insert mocks base method.
func (m *MockEngine) Insert(arg0 ...any) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Insert", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockEngineMockRecorder) Insert(arg0 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockEngine)(nil).Insert), arg0...)
}

// InsertOne mocks base method.
func (m *MockEngine) InsertOne(arg0 any) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOne", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertOne indicates an expected call of InsertOne.
func (mr *MockEngineMockRecorder) InsertOne(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOne", reflect.TypeOf((*MockEngine)(nil).InsertOne), arg0)
}

// IsTableEmpty mocks base method.
func (m *MockEngine) IsTableEmpty(bean any) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTableEmpty", bean)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsTableEmpty indicates an expected call of IsTableEmpty.
func (mr *MockEngineMockRecorder) IsTableEmpty(bean any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTableEmpty", reflect.TypeOf((*MockEngine)(nil).IsTableEmpty), bean)
}

// IsTableExist mocks base method.
func (m *MockEngine) IsTableExist(beanOrTableName any) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTableExist", beanOrTableName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsTableExist indicates an expected call of IsTableExist.
func (mr *MockEngineMockRecorder) IsTableExist(beanOrTableName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTableExist", reflect.TypeOf((*MockEngine)(nil).IsTableExist), beanOrTableName)
}

// Iterate mocks base method.
func (m *MockEngine) Iterate(arg0 any, arg1 xorm.IterFunc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Iterate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Iterate indicates an expected call of Iterate.
func (mr *MockEngineMockRecorder) Iterate(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Iterate", reflect.TypeOf((*MockEngine)(nil).Iterate), arg0, arg1)
}

// Join mocks base method.
func (m *MockEngine) Join(joinOperator string, tablename, condition any, args ...any) *xorm.Session {
	m.ctrl.T.Helper()
	varargs := []any{joinOperator, tablename, condition}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Join", varargs...)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// Join indicates an expected call of Join.
func (mr *MockEngineMockRecorder) Join(joinOperator, tablename, condition any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{joinOperator, tablename, condition}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Join", reflect.TypeOf((*MockEngine)(nil).Join), varargs...)
}

// Limit mocks base method.
func (m *MockEngine) Limit(arg0 int, arg1 ...int) *xorm.Session {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Limit", varargs...)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// Limit indicates an expected call of Limit.
func (mr *MockEngineMockRecorder) Limit(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Limit", reflect.TypeOf((*MockEngine)(nil).Limit), varargs...)
}

// MapCacher mocks base method.
func (m *MockEngine) MapCacher(arg0 any, arg1 caches.Cacher) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MapCacher", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// MapCacher indicates an expected call of MapCacher.
func (mr *MockEngineMockRecorder) MapCacher(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MapCacher", reflect.TypeOf((*MockEngine)(nil).MapCacher), arg0, arg1)
}

// MustCols mocks base method.
func (m *MockEngine) MustCols(columns ...string) *xorm.Session {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range columns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MustCols", varargs...)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// MustCols indicates an expected call of MustCols.
func (mr *MockEngineMockRecorder) MustCols(columns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustCols", reflect.TypeOf((*MockEngine)(nil).MustCols), columns...)
}

// NewSession mocks base method.
func (m *MockEngine) NewSession() *xorm.Session {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewSession")
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// NewSession indicates an expected call of NewSession.
func (mr *MockEngineMockRecorder) NewSession() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewSession", reflect.TypeOf((*MockEngine)(nil).NewSession))
}

// NoAutoCondition mocks base method.
func (m *MockEngine) NoAutoCondition(arg0 ...bool) *xorm.Session {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NoAutoCondition", varargs...)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// NoAutoCondition indicates an expected call of NoAutoCondition.
func (mr *MockEngineMockRecorder) NoAutoCondition(arg0 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NoAutoCondition", reflect.TypeOf((*MockEngine)(nil).NoAutoCondition), arg0...)
}

// NoAutoTime mocks base method.
func (m *MockEngine) NoAutoTime() *xorm.Session {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NoAutoTime")
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// NoAutoTime indicates an expected call of NoAutoTime.
func (mr *MockEngineMockRecorder) NoAutoTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NoAutoTime", reflect.TypeOf((*MockEngine)(nil).NoAutoTime))
}

// NotIn mocks base method.
func (m *MockEngine) NotIn(arg0 string, arg1 ...any) *xorm.Session {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NotIn", varargs...)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// NotIn indicates an expected call of NotIn.
func (mr *MockEngineMockRecorder) NotIn(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotIn", reflect.TypeOf((*MockEngine)(nil).NotIn), varargs...)
}

// Nullable mocks base method.
func (m *MockEngine) Nullable(arg0 ...string) *xorm.Session {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Nullable", varargs...)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// Nullable indicates an expected call of Nullable.
func (mr *MockEngineMockRecorder) Nullable(arg0 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Nullable", reflect.TypeOf((*MockEngine)(nil).Nullable), arg0...)
}

// Omit mocks base method.
func (m *MockEngine) Omit(columns ...string) *xorm.Session {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range columns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Omit", varargs...)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// Omit indicates an expected call of Omit.
func (mr *MockEngineMockRecorder) Omit(columns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Omit", reflect.TypeOf((*MockEngine)(nil).Omit), columns...)
}

// OrderBy mocks base method.
func (m *MockEngine) OrderBy(order any, args ...any) *xorm.Session {
	m.ctrl.T.Helper()
	varargs := []any{order}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OrderBy", varargs...)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// OrderBy indicates an expected call of OrderBy.
func (mr *MockEngineMockRecorder) OrderBy(order any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{order}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderBy", reflect.TypeOf((*MockEngine)(nil).OrderBy), varargs...)
}

// Ping mocks base method.
func (m *MockEngine) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockEngineMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockEngine)(nil).Ping))
}

// Prepare mocks base method.
func (m *MockEngine) Prepare() *xorm.Session {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Prepare")
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// Prepare indicates an expected call of Prepare.
func (mr *MockEngineMockRecorder) Prepare() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prepare", reflect.TypeOf((*MockEngine)(nil).Prepare))
}

// Query mocks base method.
func (m *MockEngine) Query(sqlOrArgs ...any) ([]map[string][]byte, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range sqlOrArgs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].([]map[string][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockEngineMockRecorder) Query(sqlOrArgs ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockEngine)(nil).Query), sqlOrArgs...)
}

// QueryInterface mocks base method.
func (m *MockEngine) QueryInterface(sqlOrArgs ...any) ([]map[string]any, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range sqlOrArgs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryInterface", varargs...)
	ret0, _ := ret[0].([]map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryInterface indicates an expected call of QueryInterface.
func (mr *MockEngineMockRecorder) QueryInterface(sqlOrArgs ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryInterface", reflect.TypeOf((*MockEngine)(nil).QueryInterface), sqlOrArgs...)
}

// QueryString mocks base method.
func (m *MockEngine) QueryString(sqlOrArgs ...any) ([]map[string]string, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range sqlOrArgs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryString", varargs...)
	ret0, _ := ret[0].([]map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryString indicates an expected call of QueryString.
func (mr *MockEngineMockRecorder) QueryString(sqlOrArgs ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryString", reflect.TypeOf((*MockEngine)(nil).QueryString), sqlOrArgs...)
}

// Quote mocks base method.
func (m *MockEngine) Quote(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Quote", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// Quote indicates an expected call of Quote.
func (mr *MockEngineMockRecorder) Quote(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Quote", reflect.TypeOf((*MockEngine)(nil).Quote), arg0)
}

// Rows mocks base method.
func (m *MockEngine) Rows(bean any) (*xorm.Rows, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rows", bean)
	ret0, _ := ret[0].(*xorm.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Rows indicates an expected call of Rows.
func (mr *MockEngineMockRecorder) Rows(bean any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rows", reflect.TypeOf((*MockEngine)(nil).Rows), bean)
}

// SQL mocks base method.
func (m *MockEngine) SQL(arg0 any, arg1 ...any) *xorm.Session {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SQL", varargs...)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// SQL indicates an expected call of SQL.
func (mr *MockEngineMockRecorder) SQL(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SQL", reflect.TypeOf((*MockEngine)(nil).SQL), varargs...)
}

// Select mocks base method.
func (m *MockEngine) Select(arg0 string) *xorm.Session {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Select", arg0)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// Select indicates an expected call of Select.
func (mr *MockEngineMockRecorder) Select(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockEngine)(nil).Select), arg0)
}

// SetCacher mocks base method.
func (m *MockEngine) SetCacher(arg0 string, arg1 caches.Cacher) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCacher", arg0, arg1)
}

// SetCacher indicates an expected call of SetCacher.
func (mr *MockEngineMockRecorder) SetCacher(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCacher", reflect.TypeOf((*MockEngine)(nil).SetCacher), arg0, arg1)
}

// SetColumnMapper mocks base method.
func (m *MockEngine) SetColumnMapper(arg0 names.Mapper) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetColumnMapper", arg0)
}

// SetColumnMapper indicates an expected call of SetColumnMapper.
func (mr *MockEngineMockRecorder) SetColumnMapper(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetColumnMapper", reflect.TypeOf((*MockEngine)(nil).SetColumnMapper), arg0)
}

// SetConnMaxLifetime mocks base method.
func (m *MockEngine) SetConnMaxLifetime(arg0 time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetConnMaxLifetime", arg0)
}

// SetConnMaxLifetime indicates an expected call of SetConnMaxLifetime.
func (mr *MockEngineMockRecorder) SetConnMaxLifetime(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConnMaxLifetime", reflect.TypeOf((*MockEngine)(nil).SetConnMaxLifetime), arg0)
}

// SetDefaultCacher mocks base method.
func (m *MockEngine) SetDefaultCacher(arg0 caches.Cacher) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDefaultCacher", arg0)
}

// SetDefaultCacher indicates an expected call of SetDefaultCacher.
func (mr *MockEngineMockRecorder) SetDefaultCacher(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDefaultCacher", reflect.TypeOf((*MockEngine)(nil).SetDefaultCacher), arg0)
}

// SetExpr mocks base method.
func (m *MockEngine) SetExpr(arg0 string, arg1 any) *xorm.Session {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetExpr", arg0, arg1)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// SetExpr indicates an expected call of SetExpr.
func (mr *MockEngineMockRecorder) SetExpr(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetExpr", reflect.TypeOf((*MockEngine)(nil).SetExpr), arg0, arg1)
}

// SetLogLevel mocks base method.
func (m *MockEngine) SetLogLevel(arg0 log.LogLevel) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLogLevel", arg0)
}

// SetLogLevel indicates an expected call of SetLogLevel.
func (mr *MockEngineMockRecorder) SetLogLevel(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLogLevel", reflect.TypeOf((*MockEngine)(nil).SetLogLevel), arg0)
}

// SetLogger mocks base method.
func (m *MockEngine) SetLogger(logger any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLogger", logger)
}

// SetLogger indicates an expected call of SetLogger.
func (mr *MockEngineMockRecorder) SetLogger(logger any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLogger", reflect.TypeOf((*MockEngine)(nil).SetLogger), logger)
}

// SetMapper mocks base method.
func (m *MockEngine) SetMapper(arg0 names.Mapper) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetMapper", arg0)
}

// SetMapper indicates an expected call of SetMapper.
func (mr *MockEngineMockRecorder) SetMapper(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMapper", reflect.TypeOf((*MockEngine)(nil).SetMapper), arg0)
}

// SetMaxIdleConns mocks base method.
func (m *MockEngine) SetMaxIdleConns(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetMaxIdleConns", arg0)
}

// SetMaxIdleConns indicates an expected call of SetMaxIdleConns.
func (mr *MockEngineMockRecorder) SetMaxIdleConns(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMaxIdleConns", reflect.TypeOf((*MockEngine)(nil).SetMaxIdleConns), arg0)
}

// SetMaxOpenConns mocks base method.
func (m *MockEngine) SetMaxOpenConns(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetMaxOpenConns", arg0)
}

// SetMaxOpenConns indicates an expected call of SetMaxOpenConns.
func (mr *MockEngineMockRecorder) SetMaxOpenConns(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMaxOpenConns", reflect.TypeOf((*MockEngine)(nil).SetMaxOpenConns), arg0)
}

// SetPolicy mocks base method.
func (m *MockEngine) SetPolicy(policy xorm.GroupPolicy) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPolicy", policy)
}

// SetPolicy indicates an expected call of SetPolicy.
func (mr *MockEngineMockRecorder) SetPolicy(policy any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPolicy", reflect.TypeOf((*MockEngine)(nil).SetPolicy), policy)
}

// SetQuotePolicy mocks base method.
func (m *MockEngine) SetQuotePolicy(arg0 dialects.QuotePolicy) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetQuotePolicy", arg0)
}

// SetQuotePolicy indicates an expected call of SetQuotePolicy.
func (mr *MockEngineMockRecorder) SetQuotePolicy(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetQuotePolicy", reflect.TypeOf((*MockEngine)(nil).SetQuotePolicy), arg0)
}

// SetSchema mocks base method.
func (m *MockEngine) SetSchema(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSchema", arg0)
}

// SetSchema indicates an expected call of SetSchema.
func (mr *MockEngineMockRecorder) SetSchema(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSchema", reflect.TypeOf((*MockEngine)(nil).SetSchema), arg0)
}

// SetTZDatabase mocks base method.
func (m *MockEngine) SetTZDatabase(tz *time.Location) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTZDatabase", tz)
}

// SetTZDatabase indicates an expected call of SetTZDatabase.
func (mr *MockEngineMockRecorder) SetTZDatabase(tz any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTZDatabase", reflect.TypeOf((*MockEngine)(nil).SetTZDatabase), tz)
}

// SetTZLocation mocks base method.
func (m *MockEngine) SetTZLocation(tz *time.Location) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTZLocation", tz)
}

// SetTZLocation indicates an expected call of SetTZLocation.
func (mr *MockEngineMockRecorder) SetTZLocation(tz any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTZLocation", reflect.TypeOf((*MockEngine)(nil).SetTZLocation), tz)
}

// SetTableMapper mocks base method.
func (m *MockEngine) SetTableMapper(arg0 names.Mapper) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTableMapper", arg0)
}

// SetTableMapper indicates an expected call of SetTableMapper.
func (mr *MockEngineMockRecorder) SetTableMapper(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTableMapper", reflect.TypeOf((*MockEngine)(nil).SetTableMapper), arg0)
}

// SetTagIdentifier mocks base method.
func (m *MockEngine) SetTagIdentifier(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTagIdentifier", arg0)
}

// SetTagIdentifier indicates an expected call of SetTagIdentifier.
func (mr *MockEngineMockRecorder) SetTagIdentifier(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTagIdentifier", reflect.TypeOf((*MockEngine)(nil).SetTagIdentifier), arg0)
}

// ShowSQL mocks base method.
func (m *MockEngine) ShowSQL(show ...bool) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range show {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "ShowSQL", varargs...)
}

// ShowSQL indicates an expected call of ShowSQL.
func (mr *MockEngineMockRecorder) ShowSQL(show ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowSQL", reflect.TypeOf((*MockEngine)(nil).ShowSQL), show...)
}

// Sqlx mocks base method.
func (m *MockEngine) Sqlx(arg0 string, args ...any) *xorm.Session {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Sqlx", varargs...)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// Sqlx indicates an expected call of Sqlx.
func (mr *MockEngineMockRecorder) Sqlx(arg0 any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sqlx", reflect.TypeOf((*MockEngine)(nil).Sqlx), varargs...)
}

// StoreEngine mocks base method.
func (m *MockEngine) StoreEngine(storeEngine string) *xorm.Session {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreEngine", storeEngine)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// StoreEngine indicates an expected call of StoreEngine.
func (mr *MockEngineMockRecorder) StoreEngine(storeEngine any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreEngine", reflect.TypeOf((*MockEngine)(nil).StoreEngine), storeEngine)
}

// Sum mocks base method.
func (m *MockEngine) Sum(bean any, colName string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sum", bean, colName)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sum indicates an expected call of Sum.
func (mr *MockEngineMockRecorder) Sum(bean, colName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sum", reflect.TypeOf((*MockEngine)(nil).Sum), bean, colName)
}

// SumInt mocks base method.
func (m *MockEngine) SumInt(bean any, colName string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SumInt", bean, colName)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SumInt indicates an expected call of SumInt.
func (mr *MockEngineMockRecorder) SumInt(bean, colName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SumInt", reflect.TypeOf((*MockEngine)(nil).SumInt), bean, colName)
}

// Sums mocks base method.
func (m *MockEngine) Sums(bean any, colNames ...string) ([]float64, error) {
	m.ctrl.T.Helper()
	varargs := []any{bean}
	for _, a := range colNames {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Sums", varargs...)
	ret0, _ := ret[0].([]float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sums indicates an expected call of Sums.
func (mr *MockEngineMockRecorder) Sums(bean any, colNames ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{bean}, colNames...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sums", reflect.TypeOf((*MockEngine)(nil).Sums), varargs...)
}

// SumsInt mocks base method.
func (m *MockEngine) SumsInt(bean any, colNames ...string) ([]int64, error) {
	m.ctrl.T.Helper()
	varargs := []any{bean}
	for _, a := range colNames {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SumsInt", varargs...)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SumsInt indicates an expected call of SumsInt.
func (mr *MockEngineMockRecorder) SumsInt(bean any, colNames ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{bean}, colNames...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SumsInt", reflect.TypeOf((*MockEngine)(nil).SumsInt), varargs...)
}

// Sync mocks base method.
func (m *MockEngine) Sync(arg0 ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Sync", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Sync indicates an expected call of Sync.
func (mr *MockEngineMockRecorder) Sync(arg0 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockEngine)(nil).Sync), arg0...)
}

// Sync2 mocks base method.
func (m *MockEngine) Sync2(arg0 ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Sync2", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Sync2 indicates an expected call of Sync2.
func (mr *MockEngineMockRecorder) Sync2(arg0 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync2", reflect.TypeOf((*MockEngine)(nil).Sync2), arg0...)
}

// SyncWithOptions mocks base method.
func (m *MockEngine) SyncWithOptions(arg0 xorm.SyncOptions, arg1 ...any) (*xorm.SyncResult, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SyncWithOptions", varargs...)
	ret0, _ := ret[0].(*xorm.SyncResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncWithOptions indicates an expected call of SyncWithOptions.
func (mr *MockEngineMockRecorder) SyncWithOptions(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncWithOptions", reflect.TypeOf((*MockEngine)(nil).SyncWithOptions), varargs...)
}

// Table mocks base method.
func (m *MockEngine) Table(tableNameOrBean any) *xorm.Session {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Table", tableNameOrBean)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// Table indicates an expected call of Table.
func (mr *MockEngineMockRecorder) Table(tableNameOrBean any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Table", reflect.TypeOf((*MockEngine)(nil).Table), tableNameOrBean)
}

// TableInfo mocks base method.
func (m *MockEngine) TableInfo(bean any) (*schemas.Table, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TableInfo", bean)
	ret0, _ := ret[0].(*schemas.Table)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TableInfo indicates an expected call of TableInfo.
func (mr *MockEngineMockRecorder) TableInfo(bean any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TableInfo", reflect.TypeOf((*MockEngine)(nil).TableInfo), bean)
}

// TableName mocks base method.
func (m *MockEngine) TableName(arg0 any, arg1 ...bool) string {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TableName", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// TableName indicates an expected call of TableName.
func (mr *MockEngineMockRecorder) TableName(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TableName", reflect.TypeOf((*MockEngine)(nil).TableName), varargs...)
}

// Transaction mocks base method.
func (m *MockEngine) Transaction(fn func(xorm.Interface) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transaction", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transaction indicates an expected call of Transaction.
func (mr *MockEngineMockRecorder) Transaction(fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transaction", reflect.TypeOf((*MockEngine)(nil).Transaction), fn)
}

// Truncate mocks base method.
func (m *MockEngine) Truncate(arg0 ...any) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Truncate", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Truncate indicates an expected call of Truncate.
func (mr *MockEngineMockRecorder) Truncate(arg0 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Truncate", reflect.TypeOf((*MockEngine)(nil).Truncate), arg0...)
}

// UnMapType mocks base method.
func (m *MockEngine) UnMapType(arg0 reflect.Type) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UnMapType", arg0)
}

// UnMapType indicates an expected call of UnMapType.
func (mr *MockEngineMockRecorder) UnMapType(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnMapType", reflect.TypeOf((*MockEngine)(nil).UnMapType), arg0)
}

// Unscoped mocks base method.
func (m *MockEngine) Unscoped() *xorm.Session {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unscoped")
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// Unscoped indicates an expected call of Unscoped.
func (mr *MockEngineMockRecorder) Unscoped() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unscoped", reflect.TypeOf((*MockEngine)(nil).Unscoped))
}

// Update mocks base method.
func (m *MockEngine) Update(bean any, condiBeans ...any) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []any{bean}
	for _, a := range condiBeans {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockEngineMockRecorder) Update(bean any, condiBeans ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{bean}, condiBeans...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockEngine)(nil).Update), varargs...)
}

// UseBool mocks base method.
func (m *MockEngine) UseBool(arg0 ...string) *xorm.Session {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UseBool", varargs...)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// UseBool indicates an expected call of UseBool.
func (mr *MockEngineMockRecorder) UseBool(arg0 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseBool", reflect.TypeOf((*MockEngine)(nil).UseBool), arg0...)
}

// Where mocks base method.
func (m *MockEngine) Where(arg0 any, arg1 ...any) *xorm.Session {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Where", varargs...)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// Where indicates an expected call of Where.
func (mr *MockEngineMockRecorder) Where(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Where", reflect.TypeOf((*MockEngine)(nil).Where), varargs...)
}

// MockSession is a mock of Session interface.
type MockSession struct {
	ctrl     *gomock.Controller
	recorder *MockSessionMockRecorder
	isgomock struct{}
}

// MockSessionMockRecorder is the mock recorder for MockSession.
type MockSessionMockRecorder struct {
	mock *MockSession
}

// NewMockSession creates a new mock instance.
func NewMockSession(ctrl *gomock.Controller) *MockSession {
	mock := &MockSession{ctrl: ctrl}
	mock.recorder = &MockSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSession) EXPECT() *MockSessionMockRecorder {
	return m.recorder
}

// Alias mocks base method.
func (m *MockSession) Alias(alias string) *xorm.Session {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Alias", alias)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// Alias indicates an expected call of Alias.
func (mr *MockSessionMockRecorder) Alias(alias any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Alias", reflect.TypeOf((*MockSession)(nil).Alias), alias)
}

// AllCols mocks base method.
func (m *MockSession) AllCols() *xorm.Session {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllCols")
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// AllCols indicates an expected call of AllCols.
func (mr *MockSessionMockRecorder) AllCols() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllCols", reflect.TypeOf((*MockSession)(nil).AllCols))
}

// Asc mocks base method.
func (m *MockSession) Asc(colNames ...string) *xorm.Session {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range colNames {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Asc", varargs...)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// Asc indicates an expected call of Asc.
func (mr *MockSessionMockRecorder) Asc(colNames ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Asc", reflect.TypeOf((*MockSession)(nil).Asc), colNames...)
}

// Begin mocks base method.
func (m *MockSession) Begin() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Begin")
	ret0, _ := ret[0].(error)
	return ret0
}

// Begin indicates an expected call of Begin.
func (mr *MockSessionMockRecorder) Begin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockSession)(nil).Begin))
}

// BufferSize mocks base method.
func (m *MockSession) BufferSize(size int) *xorm.Session {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BufferSize", size)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// BufferSize indicates an expected call of BufferSize.
func (mr *MockSessionMockRecorder) BufferSize(size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BufferSize", reflect.TypeOf((*MockSession)(nil).BufferSize), size)
}

// Close mocks base method.
func (m *MockSession) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockSessionMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSession)(nil).Close))
}

// Cols mocks base method.
func (m *MockSession) Cols(columns ...string) *xorm.Session {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range columns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Cols", varargs...)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// Cols indicates an expected call of Cols.
func (mr *MockSessionMockRecorder) Cols(columns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cols", reflect.TypeOf((*MockSession)(nil).Cols), columns...)
}

// Commit mocks base method.
func (m *MockSession) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockSessionMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockSession)(nil).Commit))
}

// Count mocks base method.
func (m *MockSession) Count(arg0 ...any) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Count", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockSessionMockRecorder) Count(arg0 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockSession)(nil).Count), arg0...)
}

// CreateIndexes mocks base method.
func (m *MockSession) CreateIndexes(bean any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIndexes", bean)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateIndexes indicates an expected call of CreateIndexes.
func (mr *MockSessionMockRecorder) CreateIndexes(bean any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIndexes", reflect.TypeOf((*MockSession)(nil).CreateIndexes), bean)
}

// CreateUniques mocks base method.
func (m *MockSession) CreateUniques(bean any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUniques", bean)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUniques indicates an expected call of CreateUniques.
func (mr *MockSessionMockRecorder) CreateUniques(bean any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUniques", reflect.TypeOf((*MockSession)(nil).CreateUniques), bean)
}

// Decr mocks base method.
func (m *MockSession) Decr(column string, arg ...any) *xorm.Session {
	m.ctrl.T.Helper()
	varargs := []any{column}
	for _, a := range arg {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Decr", varargs...)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// Decr indicates an expected call of Decr.
func (mr *MockSessionMockRecorder) Decr(column any, arg ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{column}, arg...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decr", reflect.TypeOf((*MockSession)(nil).Decr), varargs...)
}

// Delete mocks base method.
func (m *MockSession) Delete(arg0 ...any) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockSessionMockRecorder) Delete(arg0 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSession)(nil).Delete), arg0...)
}

// Desc mocks base method.
func (m *MockSession) Desc(arg0 ...string) *xorm.Session {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Desc", varargs...)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// Desc indicates an expected call of Desc.
func (mr *MockSessionMockRecorder) Desc(arg0 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Desc", reflect.TypeOf((*MockSession)(nil).Desc), arg0...)
}

// Distinct mocks base method.
func (m *MockSession) Distinct(columns ...string) *xorm.Session {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range columns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Distinct", varargs...)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// Distinct indicates an expected call of Distinct.
func (mr *MockSessionMockRecorder) Distinct(columns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Distinct", reflect.TypeOf((*MockSession)(nil).Distinct), columns...)
}

// DropIndexes mocks base method.
func (m *MockSession) DropIndexes(bean any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropIndexes", bean)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropIndexes indicates an expected call of DropIndexes.
func (mr *MockSessionMockRecorder) DropIndexes(bean any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropIndexes", reflect.TypeOf((*MockSession)(nil).DropIndexes), bean)
}

// Exec mocks base method.
func (m *MockSession) Exec(sqlOrArgs ...any) (sql.Result, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range sqlOrArgs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockSessionMockRecorder) Exec(sqlOrArgs ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockSession)(nil).Exec), sqlOrArgs...)
}

// Exist mocks base method.
func (m *MockSession) Exist(bean ...any) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range bean {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exist", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exist indicates an expected call of Exist.
func (mr *MockSessionMockRecorder) Exist(bean ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exist", reflect.TypeOf((*MockSession)(nil).Exist), bean...)
}

// Find mocks base method.
func (m *MockSession) Find(arg0 any, arg1 ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Find", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Find indicates an expected call of Find.
func (mr *MockSessionMockRecorder) Find(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockSession)(nil).Find), varargs...)
}

// FindAndCount mocks base method.
func (m *MockSession) FindAndCount(arg0 any, arg1 ...any) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindAndCount", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAndCount indicates an expected call of FindAndCount.
func (mr *MockSessionMockRecorder) FindAndCount(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAndCount", reflect.TypeOf((*MockSession)(nil).FindAndCount), varargs...)
}

// Get mocks base method.
func (m *MockSession) Get(arg0 ...any) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSessionMockRecorder) Get(arg0 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSession)(nil).Get), arg0...)
}

// GroupBy mocks base method.
func (m *MockSession) GroupBy(keys string) *xorm.Session {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupBy", keys)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// GroupBy indicates an expected call of GroupBy.
func (mr *MockSessionMockRecorder) GroupBy(keys any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupBy", reflect.TypeOf((*MockSession)(nil).GroupBy), keys)
}

// ID mocks base method.
func (m *MockSession) ID(arg0 any) *xorm.Session {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID", arg0)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockSessionMockRecorder) ID(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockSession)(nil).ID), arg0)
}

// In mocks base method.
func (m *MockSession) In(arg0 string, arg1 ...any) *xorm.Session {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "In", varargs...)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// In indicates an expected call of In.
func (mr *MockSessionMockRecorder) In(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "In", reflect.TypeOf((*MockSession)(nil).In), varargs...)
}

// Incr mocks base method.
func (m *MockSession) Incr(column string, arg ...any) *xorm.Session {
	m.ctrl.T.Helper()
	varargs := []any{column}
	for _, a := range arg {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Incr", varargs...)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// Incr indicates an expected call of Incr.
func (mr *MockSessionMockRecorder) Incr(column any, arg ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{column}, arg...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Incr", reflect.TypeOf((*MockSession)(nil).Incr), varargs...)
}

// Insert mocks base method.
func (m *MockSession) Insert(arg0 ...any) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Insert", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockSessionMockRecorder) Insert(arg0 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockSession)(nil).Insert), arg0...)
}

// InsertOne mocks base method.
func (m *MockSession) InsertOne(arg0 any) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOne", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertOne indicates an expected call of InsertOne.
func (mr *MockSessionMockRecorder) InsertOne(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOne", reflect.TypeOf((*MockSession)(nil).InsertOne), arg0)
}

// IsTableEmpty mocks base method.
func (m *MockSession) IsTableEmpty(bean any) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTableEmpty", bean)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsTableEmpty indicates an expected call of IsTableEmpty.
func (mr *MockSessionMockRecorder) IsTableEmpty(bean any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTableEmpty", reflect.TypeOf((*MockSession)(nil).IsTableEmpty), bean)
}

// IsTableExist mocks base method.
func (m *MockSession) IsTableExist(beanOrTableName any) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTableExist", beanOrTableName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsTableExist indicates an expected call of IsTableExist.
func (mr *MockSessionMockRecorder) IsTableExist(beanOrTableName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTableExist", reflect.TypeOf((*MockSession)(nil).IsTableExist), beanOrTableName)
}

// Iterate mocks base method.
func (m *MockSession) Iterate(arg0 any, arg1 xorm.IterFunc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Iterate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Iterate indicates an expected call of Iterate.
func (mr *MockSessionMockRecorder) Iterate(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Iterate", reflect.TypeOf((*MockSession)(nil).Iterate), arg0, arg1)
}

// Join mocks base method.
func (m *MockSession) Join(joinOperator string, tablename, condition any, args ...any) *xorm.Session {
	m.ctrl.T.Helper()
	varargs := []any{joinOperator, tablename, condition}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Join", varargs...)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// Join indicates an expected call of Join.
func (mr *MockSessionMockRecorder) Join(joinOperator, tablename, condition any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{joinOperator, tablename, condition}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Join", reflect.TypeOf((*MockSession)(nil).Join), varargs...)
}

// Limit mocks base method.
func (m *MockSession) Limit(arg0 int, arg1 ...int) *xorm.Session {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Limit", varargs...)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// Limit indicates an expected call of Limit.
func (mr *MockSessionMockRecorder) Limit(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Limit", reflect.TypeOf((*MockSession)(nil).Limit), varargs...)
}

// MustCols mocks base method.
func (m *MockSession) MustCols(columns ...string) *xorm.Session {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range columns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MustCols", varargs...)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// MustCols indicates an expected call of MustCols.
func (mr *MockSessionMockRecorder) MustCols(columns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustCols", reflect.TypeOf((*MockSession)(nil).MustCols), columns...)
}

// NoAutoCondition mocks base method.
func (m *MockSession) NoAutoCondition(arg0 ...bool) *xorm.Session {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NoAutoCondition", varargs...)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// NoAutoCondition indicates an expected call of NoAutoCondition.
func (mr *MockSessionMockRecorder) NoAutoCondition(arg0 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NoAutoCondition", reflect.TypeOf((*MockSession)(nil).NoAutoCondition), arg0...)
}

// NotIn mocks base method.
func (m *MockSession) NotIn(arg0 string, arg1 ...any) *xorm.Session {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NotIn", varargs...)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// NotIn indicates an expected call of NotIn.
func (mr *MockSessionMockRecorder) NotIn(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotIn", reflect.TypeOf((*MockSession)(nil).NotIn), varargs...)
}

// Nullable mocks base method.
func (m *MockSession) Nullable(arg0 ...string) *xorm.Session {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Nullable", varargs...)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// Nullable indicates an expected call of Nullable.
func (mr *MockSessionMockRecorder) Nullable(arg0 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Nullable", reflect.TypeOf((*MockSession)(nil).Nullable), arg0...)
}

// Omit mocks base method.
func (m *MockSession) Omit(columns ...string) *xorm.Session {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range columns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Omit", varargs...)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// Omit indicates an expected call of Omit.
func (mr *MockSessionMockRecorder) Omit(columns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Omit", reflect.TypeOf((*MockSession)(nil).Omit), columns...)
}

// OrderBy mocks base method.
func (m *MockSession) OrderBy(order any, args ...any) *xorm.Session {
	m.ctrl.T.Helper()
	varargs := []any{order}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OrderBy", varargs...)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// OrderBy indicates an expected call of OrderBy.
func (mr *MockSessionMockRecorder) OrderBy(order any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{order}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderBy", reflect.TypeOf((*MockSession)(nil).OrderBy), varargs...)
}

// Ping mocks base method.
func (m *MockSession) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockSessionMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockSession)(nil).Ping))
}

// Query mocks base method.
func (m *MockSession) Query(sqlOrArgs ...any) ([]map[string][]byte, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range sqlOrArgs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].([]map[string][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockSessionMockRecorder) Query(sqlOrArgs ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockSession)(nil).Query), sqlOrArgs...)
}

// QueryInterface mocks base method.
func (m *MockSession) QueryInterface(sqlOrArgs ...any) ([]map[string]any, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range sqlOrArgs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryInterface", varargs...)
	ret0, _ := ret[0].([]map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryInterface indicates an expected call of QueryInterface.
func (mr *MockSessionMockRecorder) QueryInterface(sqlOrArgs ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryInterface", reflect.TypeOf((*MockSession)(nil).QueryInterface), sqlOrArgs...)
}

// QueryString mocks base method.
func (m *MockSession) QueryString(sqlOrArgs ...any) ([]map[string]string, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range sqlOrArgs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryString", varargs...)
	ret0, _ := ret[0].([]map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryString indicates an expected call of QueryString.
func (mr *MockSessionMockRecorder) QueryString(sqlOrArgs ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryString", reflect.TypeOf((*MockSession)(nil).QueryString), sqlOrArgs...)
}

// Rollback mocks base method.
func (m *MockSession) Rollback() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback")
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockSessionMockRecorder) Rollback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockSession)(nil).Rollback))
}

// Rows mocks base method.
func (m *MockSession) Rows(bean any) (*xorm.Rows, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rows", bean)
	ret0, _ := ret[0].(*xorm.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Rows indicates an expected call of Rows.
func (mr *MockSessionMockRecorder) Rows(bean any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rows", reflect.TypeOf((*MockSession)(nil).Rows), bean)
}

// SQL mocks base method.
func (m *MockSession) SQL(arg0 any, arg1 ...any) *xorm.Session {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SQL", varargs...)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// SQL indicates an expected call of SQL.
func (mr *MockSessionMockRecorder) SQL(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SQL", reflect.TypeOf((*MockSession)(nil).SQL), varargs...)
}

// Select mocks base method.
func (m *MockSession) Select(arg0 string) *xorm.Session {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Select", arg0)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// Select indicates an expected call of Select.
func (mr *MockSessionMockRecorder) Select(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockSession)(nil).Select), arg0)
}

// SetExpr mocks base method.
func (m *MockSession) SetExpr(arg0 string, arg1 any) *xorm.Session {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetExpr", arg0, arg1)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// SetExpr indicates an expected call of SetExpr.
func (mr *MockSessionMockRecorder) SetExpr(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetExpr", reflect.TypeOf((*MockSession)(nil).SetExpr), arg0, arg1)
}

// Sum mocks base method.
func (m *MockSession) Sum(bean any, colName string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sum", bean, colName)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sum indicates an expected call of Sum.
func (mr *MockSessionMockRecorder) Sum(bean, colName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sum", reflect.TypeOf((*MockSession)(nil).Sum), bean, colName)
}

// SumInt mocks base method.
func (m *MockSession) SumInt(bean any, colName string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SumInt", bean, colName)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SumInt indicates an expected call of SumInt.
func (mr *MockSessionMockRecorder) SumInt(bean, colName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SumInt", reflect.TypeOf((*MockSession)(nil).SumInt), bean, colName)
}

// Sums mocks base method.
func (m *MockSession) Sums(bean any, colNames ...string) ([]float64, error) {
	m.ctrl.T.Helper()
	varargs := []any{bean}
	for _, a := range colNames {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Sums", varargs...)
	ret0, _ := ret[0].([]float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sums indicates an expected call of Sums.
func (mr *MockSessionMockRecorder) Sums(bean any, colNames ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{bean}, colNames...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sums", reflect.TypeOf((*MockSession)(nil).Sums), varargs...)
}

// SumsInt mocks base method.
func (m *MockSession) SumsInt(bean any, colNames ...string) ([]int64, error) {
	m.ctrl.T.Helper()
	varargs := []any{bean}
	for _, a := range colNames {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SumsInt", varargs...)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SumsInt indicates an expected call of SumsInt.
func (mr *MockSessionMockRecorder) SumsInt(bean any, colNames ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{bean}, colNames...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SumsInt", reflect.TypeOf((*MockSession)(nil).SumsInt), varargs...)
}

// Table mocks base method.
func (m *MockSession) Table(tableNameOrBean any) *xorm.Session {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Table", tableNameOrBean)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// Table indicates an expected call of Table.
func (mr *MockSessionMockRecorder) Table(tableNameOrBean any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Table", reflect.TypeOf((*MockSession)(nil).Table), tableNameOrBean)
}

// Truncate mocks base method.
func (m *MockSession) Truncate(arg0 ...any) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Truncate", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Truncate indicates an expected call of Truncate.
func (mr *MockSessionMockRecorder) Truncate(arg0 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Truncate", reflect.TypeOf((*MockSession)(nil).Truncate), arg0...)
}

// Unscoped mocks base method.
func (m *MockSession) Unscoped() *xorm.Session {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unscoped")
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// Unscoped indicates an expected call of Unscoped.
func (mr *MockSessionMockRecorder) Unscoped() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unscoped", reflect.TypeOf((*MockSession)(nil).Unscoped))
}

// Update mocks base method.
func (m *MockSession) Update(bean any, condiBeans ...any) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []any{bean}
	for _, a := range condiBeans {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockSessionMockRecorder) Update(bean any, condiBeans ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{bean}, condiBeans...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSession)(nil).Update), varargs...)
}

// UseBool mocks base method.
func (m *MockSession) UseBool(arg0 ...string) *xorm.Session {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UseBool", varargs...)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// UseBool indicates an expected call of UseBool.
func (mr *MockSessionMockRecorder) UseBool(arg0 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseBool", reflect.TypeOf((*MockSession)(nil).UseBool), arg0...)
}

// Where mocks base method.
func (m *MockSession) Where(arg0 any, arg1 ...any) *xorm.Session {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Where", varargs...)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// Where indicates an expected call of Where.
func (mr *MockSessionMockRecorder) Where(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Where", reflect.TypeOf((*MockSession)(nil).Where), varargs...)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -package=redis -self_package=github.com/gone-io/gone/goner/redis -source=interface.go -destination=mock_test.go
//

// Package redis is a generated GoMock package.
package redis

import (
	reflect "reflect"
	time "time"

	redis "github.com/gomodule/redigo/redis"
	gomock "go.uber.org/mock/gomock"
)

// MockCache is a mock of Cache interface.
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
	isgomock struct{}
}

// MockCacheMockRecorder is the mock recorder for MockCache.
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance.
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockCache) Get(key string, value any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockCacheMockRecorder) Get(key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCache)(nil).Get), key, value)
}

// Keys mocks base method.
func (m *MockCache) Keys(pattern string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys", pattern)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Keys indicates an expected call of Keys.
func (mr *MockCacheMockRecorder) Keys(pattern any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockCache)(nil).Keys), pattern)
}

// Prefix mocks base method.
func (m *MockCache) Prefix() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Prefix")
	ret0, _ := ret[0].(string)
	return ret0
}

// Prefix indicates an expected call of Prefix.
func (mr *MockCacheMockRecorder) Prefix() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prefix", reflect.TypeOf((*MockCache)(nil).Prefix))
}

// Put mocks base method.
func (m *MockCache) Put(key string, value any, ttl ...time.Duration) error {
	m.ctrl.T.Helper()
	varargs := []any{key, value}
	for _, a := range ttl {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Put", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockCacheMockRecorder) Put(key, value any, ttl ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{key, value}, ttl...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockCache)(nil).Put), varargs...)
}

// Remove mocks base method.
func (m *MockCache) Remove(key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockCacheMockRecorder) Remove(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockCache)(nil).Remove), key)
}

// Set mocks base method.
func (m *MockCache) Set(key string, value any, ttl ...time.Duration) error {
	m.ctrl.T.Helper()
	varargs := []any{key, value}
	for _, a := range ttl {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Set", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockCacheMockRecorder) Set(key, value any, ttl ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{key, value}, ttl...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockCache)(nil).Set), varargs...)
}

// MockKey is a mock of Key interface.
type MockKey struct {
	ctrl     *gomock.Controller
	recorder *MockKeyMockRecorder
	isgomock struct{}
}

// MockKeyMockRecorder is the mock recorder for MockKey.
type MockKeyMockRecorder struct {
	mock *MockKey
}

// NewMockKey creates a new mock instance.
func NewMockKey(ctrl *gomock.Controller) *MockKey {
	mock := &MockKey{ctrl: ctrl}
	mock.recorder = &MockKeyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKey) EXPECT() *MockKeyMockRecorder {
	return m.recorder
}

// Del mocks base method.
func (m *MockKey) Del(key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Del", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Del indicates an expected call of Del.
func (mr *MockKeyMockRecorder) Del(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockKey)(nil).Del), key)
}

// Expire mocks base method.
func (m *MockKey) Expire(key string, ttl time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Expire", key, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// Expire indicates an expected call of Expire.
func (mr *MockKeyMockRecorder) Expire(key, ttl any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Expire", reflect.TypeOf((*MockKey)(nil).Expire), key, ttl)
}

// ExpireAt mocks base method.
func (m *MockKey) ExpireAt(key string, time time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExpireAt", key, time)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExpireAt indicates an expected call of ExpireAt.
func (mr *MockKeyMockRecorder) ExpireAt(key, time any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpireAt", reflect.TypeOf((*MockKey)(nil).ExpireAt), key, time)
}

// Incr mocks base method.
func (m *MockKey) Incr(field string, increment int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Incr", field, increment)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Incr indicates an expected call of Incr.
func (mr *MockKeyMockRecorder) Incr(field, increment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Incr", reflect.TypeOf((*MockKey)(nil).Incr), field, increment)
}

// Keys mocks base method.
func (m *MockKey) Keys(pattern string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys", pattern)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Keys indicates an expected call of Keys.
func (mr *MockKeyMockRecorder) Keys(pattern any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockKey)(nil).Keys), pattern)
}

// Prefix mocks base method.
func (m *MockKey) Prefix() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Prefix")
	ret0, _ := ret[0].(string)
	return ret0
}

// Prefix indicates an expected call of Prefix.
func (mr *MockKeyMockRecorder) Prefix() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prefix", reflect.TypeOf((*MockKey)(nil).Prefix))
}

// Ttl mocks base method.
func (m *MockKey) Ttl(key string) (time.Duration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ttl", key)
	ret0, _ := ret[0].(time.Duration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ttl indicates an expected call of Ttl.
func (mr *MockKeyMockRecorder) Ttl(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ttl", reflect.TypeOf((*MockKey)(nil).Ttl), key)
}

// MockHash is a mock of Hash interface.
type MockHash struct {
	ctrl     *gomock.Controller
	recorder *MockHashMockRecorder
	isgomock struct{}
}

// MockHashMockRecorder is the mock recorder for MockHash.
type MockHashMockRecorder struct {
	mock *MockHash
}

// NewMockHash creates a new mock instance.
func NewMockHash(ctrl *gomock.Controller) *MockHash {
	mock := &MockHash{ctrl: ctrl}
	mock.recorder = &MockHashMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHash) EXPECT() *MockHashMockRecorder {
	return m.recorder
}

// Del mocks base method.
func (m *MockHash) Del(field string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Del", field)
	ret0, _ := ret[0].(error)
	return ret0
}

// Del indicates an expected call of Del.
func (mr *MockHashMockRecorder) Del(field any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockHash)(nil).Del), field)
}

// Get mocks base method.
func (m *MockHash) Get(field string, v any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", field, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockHashMockRecorder) Get(field, v any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockHash)(nil).Get), field, v)
}

// Incr mocks base method.
func (m *MockHash) Incr(field string, increment int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Incr", field, increment)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Incr indicates an expected call of Incr.
func (mr *MockHashMockRecorder) Incr(field, increment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Incr", reflect.TypeOf((*MockHash)(nil).Incr), field, increment)
}

// Scan mocks base method.
func (m *MockHash) Scan(arg0 func(string, []byte)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scan", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Scan indicates an expected call of Scan.
func (mr *MockHashMockRecorder) Scan(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockHash)(nil).Scan), arg0)
}

// Set mocks base method.
func (m *MockHash) Set(field string, v any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", field, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockHashMockRecorder) Set(field, v any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockHash)(nil).Set), field, v)
}

// MockLocker is a mock of Locker interface.
type MockLocker struct {
	ctrl     *gomock.Controller
	recorder *MockLockerMockRecorder
	isgomock struct{}
}

// MockLockerMockRecorder is the mock recorder for MockLocker.
type MockLockerMockRecorder struct {
	mock *MockLocker
}

// NewMockLocker creates a new mock instance.
func NewMockLocker(ctrl *gomock.Controller) *MockLocker {
	mock := &MockLocker{ctrl: ctrl}
	mock.recorder = &MockLockerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLocker) EXPECT() *MockLockerMockRecorder {
	return m.recorder
}

// LockAndDo mocks base method.
func (m *MockLocker) LockAndDo(key string, fn func(), lockTime, checkPeriod time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockAndDo", key, fn, lockTime, checkPeriod)
	ret0, _ := ret[0].(error)
	return ret0
}

// LockAndDo indicates an expected call of LockAndDo.
func (mr *MockLockerMockRecorder) LockAndDo(key, fn, lockTime, checkPeriod any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockAndDo", reflect.TypeOf((*MockLocker)(nil).LockAndDo), key, fn, lockTime, checkPeriod)
}

// TryLock mocks base method.
func (m *MockLocker) TryLock(key string, ttl time.Duration) (Unlock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TryLock", key, ttl)
	ret0, _ := ret[0].(Unlock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TryLock indicates an expected call of TryLock.
func (mr *MockLockerMockRecorder) TryLock(key, ttl any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryLock", reflect.TypeOf((*MockLocker)(nil).TryLock), key, ttl)
}

// MockPool is a mock of Pool interface.
type MockPool struct {
	ctrl     *gomock.Controller
	recorder *MockPoolMockRecorder
	isgomock struct{}
}

// MockPoolMockRecorder is the mock recorder for MockPool.
type MockPoolMockRecorder struct {
	mock *MockPool
}

// NewMockPool creates a new mock instance.
func NewMockPool(ctrl *gomock.Controller) *MockPool {
	mock := &MockPool{ctrl: ctrl}
	mock.recorder = &MockPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPool) EXPECT() *MockPoolMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockPool) Close(conn redis.Conn) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close", conn)
}

// Close indicates an expected call of Close.
func (mr *MockPoolMockRecorder) Close(conn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockPool)(nil).Close), conn)
}

// Get mocks base method.
func (m *MockPool) Get() Conn {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].(Conn)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockPoolMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPool)(nil).Get))
}

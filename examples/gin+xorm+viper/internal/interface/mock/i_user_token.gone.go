// Code generated by gonectl. DO NOT EDIT.
// Source: service/i_user_token.go

package mock

import (
	"github.com/gone-io/gone/v2"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIUserToken is a mock of IUserToken interface.
type MockIUserToken struct {
	ctrl     *gomock.Controller
	recorder *MockIUserTokenMockRecorder
	isgomock struct{}
	gone.Flag
}

// MockIUserTokenMockRecorder is the mock recorder for MockIUserToken.
type MockIUserTokenMockRecorder struct {
	mock *MockIUserToken
}

// NewMockIUserToken creates a new mock instance.
func NewMockIUserToken(ctrl *gomock.Controller) *MockIUserToken {
	mock := &MockIUserToken{ctrl: ctrl}
	mock.recorder = &MockIUserTokenMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserToken) EXPECT() *MockIUserTokenMockRecorder {
	return m.recorder
}

// CreateToken mocks base method.
func (m *MockIUserToken) CreateToken(userId int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateToken", userId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateToken indicates an expected call of CreateToken.
func (mr *MockIUserTokenMockRecorder) CreateToken(userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateToken", reflect.TypeOf((*MockIUserToken)(nil).CreateToken), userId)
}

// DestroyToken mocks base method.
func (m *MockIUserToken) DestroyToken(token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DestroyToken", token)
	ret0, _ := ret[0].(error)
	return ret0
}

// DestroyToken indicates an expected call of DestroyToken.
func (mr *MockIUserTokenMockRecorder) DestroyToken(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroyToken", reflect.TypeOf((*MockIUserToken)(nil).DestroyToken), token)
}

// ParseToken mocks base method.
func (m *MockIUserToken) ParseToken(token string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", token)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockIUserTokenMockRecorder) ParseToken(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockIUserToken)(nil).ParseToken), token)
}

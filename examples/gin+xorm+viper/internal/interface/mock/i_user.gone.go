// Code generated by gonectr. DO NOT EDIT.
// Source: service/i_user.go

package mock

import (
	"github.com/gone-io/gone/v2"
	reflect "reflect"
	entity "template_module/internal/interface/entity"

	gomock "go.uber.org/mock/gomock"
)

// MockIUserLogin is a mock of IUserLogin interface.
type MockIUserLogin struct {
	ctrl     *gomock.Controller
	recorder *MockIUserLoginMockRecorder
	isgomock struct{}
	gone.Flag
}

// MockIUserLoginMockRecorder is the mock recorder for MockIUserLogin.
type MockIUserLoginMockRecorder struct {
	mock *MockIUserLogin
}

// NewMockIUserLogin creates a new mock instance.
func NewMockIUserLogin(ctrl *gomock.Controller) *MockIUserLogin {
	mock := &MockIUserLogin{ctrl: ctrl}
	mock.recorder = &MockIUserLoginMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserLogin) EXPECT() *MockIUserLoginMockRecorder {
	return m.recorder
}

// GetUserIdFromToken mocks base method.
func (m *MockIUserLogin) GetUserIdFromToken(token string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIdFromToken", token)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserIdFromToken indicates an expected call of GetUserIdFromToken.
func (mr *MockIUserLoginMockRecorder) GetUserIdFromToken(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIdFromToken", reflect.TypeOf((*MockIUserLogin)(nil).GetUserIdFromToken), token)
}

// Login mocks base method.
func (m *MockIUserLogin) Login(loginParam *entity.LoginParam) (*entity.LoginResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", loginParam)
	ret0, _ := ret[0].(*entity.LoginResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockIUserLoginMockRecorder) Login(loginParam any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockIUserLogin)(nil).Login), loginParam)
}

// Logout mocks base method.
func (m *MockIUserLogin) Logout(token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", token)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout.
func (mr *MockIUserLoginMockRecorder) Logout(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockIUserLogin)(nil).Logout), token)
}

// Register mocks base method.
func (m *MockIUserLogin) Register(registerParam *entity.RegisterParam) (*entity.LoginResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", registerParam)
	ret0, _ := ret[0].(*entity.LoginResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockIUserLoginMockRecorder) Register(registerParam any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockIUserLogin)(nil).Register), registerParam)
}

// MockIUser is a mock of IUser interface.
type MockIUser struct {
	ctrl     *gomock.Controller
	recorder *MockIUserMockRecorder
	isgomock struct{}
	gone.Flag
}

// MockIUserMockRecorder is the mock recorder for MockIUser.
type MockIUserMockRecorder struct {
	mock *MockIUser
}

// NewMockIUser creates a new mock instance.
func NewMockIUser(ctrl *gomock.Controller) *MockIUser {
	mock := &MockIUser{ctrl: ctrl}
	mock.recorder = &MockIUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUser) EXPECT() *MockIUserMockRecorder {
	return m.recorder
}

// GetUserById mocks base method.
func (m *MockIUser) GetUserById(userId int64) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", userId)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockIUserMockRecorder) GetUserById(userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockIUser)(nil).GetUserById), userId)
}

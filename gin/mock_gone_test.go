// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gone-io/gone/v2 (interfaces: Logger,Loader,FuncInjector)
//
// Generated by this command:
//
//	mockgen -package=gin -destination=mock_gone_test.go github.com/gone-io/gone/v2 Logger,Loader,FuncInjector
//

// Package gin is a generated GoMock package.
package gin

import (
	reflect "reflect"

	gone "github.com/gone-io/gone/v2"
	gomock "go.uber.org/mock/gomock"
)

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
	isgomock struct{}
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Debugf mocks base method.
func (m *MockLogger) Debugf(msg string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debugf", varargs...)
}

// Debugf indicates an expected call of Debugf.
func (mr *MockLoggerMockRecorder) Debugf(msg any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debugf", reflect.TypeOf((*MockLogger)(nil).Debugf), varargs...)
}

// Errorf mocks base method.
func (m *MockLogger) Errorf(msg string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Errorf", varargs...)
}

// Errorf indicates an expected call of Errorf.
func (mr *MockLoggerMockRecorder) Errorf(msg any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Errorf", reflect.TypeOf((*MockLogger)(nil).Errorf), varargs...)
}

// GetLevel mocks base method.
func (m *MockLogger) GetLevel() gone.LoggerLevel {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLevel")
	ret0, _ := ret[0].(gone.LoggerLevel)
	return ret0
}

// GetLevel indicates an expected call of GetLevel.
func (mr *MockLoggerMockRecorder) GetLevel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLevel", reflect.TypeOf((*MockLogger)(nil).GetLevel))
}

// Infof mocks base method.
func (m *MockLogger) Infof(msg string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Infof", varargs...)
}

// Infof indicates an expected call of Infof.
func (mr *MockLoggerMockRecorder) Infof(msg any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Infof", reflect.TypeOf((*MockLogger)(nil).Infof), varargs...)
}

// SetLevel mocks base method.
func (m *MockLogger) SetLevel(level gone.LoggerLevel) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLevel", level)
}

// SetLevel indicates an expected call of SetLevel.
func (mr *MockLoggerMockRecorder) SetLevel(level any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLevel", reflect.TypeOf((*MockLogger)(nil).SetLevel), level)
}

// Warnf mocks base method.
func (m *MockLogger) Warnf(msg string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warnf", varargs...)
}

// Warnf indicates an expected call of Warnf.
func (mr *MockLoggerMockRecorder) Warnf(msg any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warnf", reflect.TypeOf((*MockLogger)(nil).Warnf), varargs...)
}

// MockLoader is a mock of Loader interface.
type MockLoader struct {
	ctrl     *gomock.Controller
	recorder *MockLoaderMockRecorder
	isgomock struct{}
}

// MockLoaderMockRecorder is the mock recorder for MockLoader.
type MockLoaderMockRecorder struct {
	mock *MockLoader
}

// NewMockLoader creates a new mock instance.
func NewMockLoader(ctrl *gomock.Controller) *MockLoader {
	mock := &MockLoader{ctrl: ctrl}
	mock.recorder = &MockLoaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoader) EXPECT() *MockLoaderMockRecorder {
	return m.recorder
}

// Load mocks base method.
func (m *MockLoader) Load(goner gone.Goner, options ...gone.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{goner}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Load", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Load indicates an expected call of Load.
func (mr *MockLoaderMockRecorder) Load(goner any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{goner}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockLoader)(nil).Load), varargs...)
}

// Loaded mocks base method.
func (m *MockLoader) Loaded(arg0 gone.LoaderKey) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Loaded", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Loaded indicates an expected call of Loaded.
func (mr *MockLoaderMockRecorder) Loaded(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Loaded", reflect.TypeOf((*MockLoader)(nil).Loaded), arg0)
}

// MockFuncInjector is a mock of FuncInjector interface.
type MockFuncInjector struct {
	ctrl     *gomock.Controller
	recorder *MockFuncInjectorMockRecorder
	isgomock struct{}
}

// MockFuncInjectorMockRecorder is the mock recorder for MockFuncInjector.
type MockFuncInjectorMockRecorder struct {
	mock *MockFuncInjector
}

// NewMockFuncInjector creates a new mock instance.
func NewMockFuncInjector(ctrl *gomock.Controller) *MockFuncInjector {
	mock := &MockFuncInjector{ctrl: ctrl}
	mock.recorder = &MockFuncInjectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFuncInjector) EXPECT() *MockFuncInjectorMockRecorder {
	return m.recorder
}

// InjectFuncParameters mocks base method.
func (m *MockFuncInjector) InjectFuncParameters(fn any, injectBefore, injectAfter gone.FuncInjectHook) ([]reflect.Value, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InjectFuncParameters", fn, injectBefore, injectAfter)
	ret0, _ := ret[0].([]reflect.Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InjectFuncParameters indicates an expected call of InjectFuncParameters.
func (mr *MockFuncInjectorMockRecorder) InjectFuncParameters(fn, injectBefore, injectAfter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InjectFuncParameters", reflect.TypeOf((*MockFuncInjector)(nil).InjectFuncParameters), fn, injectBefore, injectAfter)
}

// InjectWrapFunc mocks base method.
func (m *MockFuncInjector) InjectWrapFunc(fn any, injectBefore, injectAfter gone.FuncInjectHook) (func() []any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InjectWrapFunc", fn, injectBefore, injectAfter)
	ret0, _ := ret[0].(func() []any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InjectWrapFunc indicates an expected call of InjectWrapFunc.
func (mr *MockFuncInjectorMockRecorder) InjectWrapFunc(fn, injectBefore, injectAfter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InjectWrapFunc", reflect.TypeOf((*MockFuncInjector)(nil).InjectWrapFunc), fn, injectBefore, injectAfter)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -package=gin -destination=mock_gin_test.go -self_package=github.com/gone-io/goner/gin -source=interface.go
//

// Package gin is a generated GoMock package.
package gin

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "go.uber.org/mock/gomock"
)

// MockIRoutes is a mock of IRoutes interface.
type MockIRoutes struct {
	ctrl     *gomock.Controller
	recorder *MockIRoutesMockRecorder
	isgomock struct{}
}

// MockIRoutesMockRecorder is the mock recorder for MockIRoutes.
type MockIRoutesMockRecorder struct {
	mock *MockIRoutes
}

// NewMockIRoutes creates a new mock instance.
func NewMockIRoutes(ctrl *gomock.Controller) *MockIRoutes {
	mock := &MockIRoutes{ctrl: ctrl}
	mock.recorder = &MockIRoutesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRoutes) EXPECT() *MockIRoutesMockRecorder {
	return m.recorder
}

// Any mocks base method.
func (m *MockIRoutes) Any(arg0 string, arg1 ...HandlerFunc) IRoutes {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Any", varargs...)
	ret0, _ := ret[0].(IRoutes)
	return ret0
}

// Any indicates an expected call of Any.
func (mr *MockIRoutesMockRecorder) Any(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Any", reflect.TypeOf((*MockIRoutes)(nil).Any), varargs...)
}

// DELETE mocks base method.
func (m *MockIRoutes) DELETE(arg0 string, arg1 ...HandlerFunc) IRoutes {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DELETE", varargs...)
	ret0, _ := ret[0].(IRoutes)
	return ret0
}

// DELETE indicates an expected call of DELETE.
func (mr *MockIRoutesMockRecorder) DELETE(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DELETE", reflect.TypeOf((*MockIRoutes)(nil).DELETE), varargs...)
}

// GET mocks base method.
func (m *MockIRoutes) GET(arg0 string, arg1 ...HandlerFunc) IRoutes {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GET", varargs...)
	ret0, _ := ret[0].(IRoutes)
	return ret0
}

// GET indicates an expected call of GET.
func (mr *MockIRoutesMockRecorder) GET(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GET", reflect.TypeOf((*MockIRoutes)(nil).GET), varargs...)
}

// HEAD mocks base method.
func (m *MockIRoutes) HEAD(arg0 string, arg1 ...HandlerFunc) IRoutes {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HEAD", varargs...)
	ret0, _ := ret[0].(IRoutes)
	return ret0
}

// HEAD indicates an expected call of HEAD.
func (mr *MockIRoutesMockRecorder) HEAD(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HEAD", reflect.TypeOf((*MockIRoutes)(nil).HEAD), varargs...)
}

// Handle mocks base method.
func (m *MockIRoutes) Handle(arg0, arg1 string, arg2 ...HandlerFunc) IRoutes {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Handle", varargs...)
	ret0, _ := ret[0].(IRoutes)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockIRoutesMockRecorder) Handle(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockIRoutes)(nil).Handle), varargs...)
}

// OPTIONS mocks base method.
func (m *MockIRoutes) OPTIONS(arg0 string, arg1 ...HandlerFunc) IRoutes {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OPTIONS", varargs...)
	ret0, _ := ret[0].(IRoutes)
	return ret0
}

// OPTIONS indicates an expected call of OPTIONS.
func (mr *MockIRoutesMockRecorder) OPTIONS(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OPTIONS", reflect.TypeOf((*MockIRoutes)(nil).OPTIONS), varargs...)
}

// PATCH mocks base method.
func (m *MockIRoutes) PATCH(arg0 string, arg1 ...HandlerFunc) IRoutes {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PATCH", varargs...)
	ret0, _ := ret[0].(IRoutes)
	return ret0
}

// PATCH indicates an expected call of PATCH.
func (mr *MockIRoutesMockRecorder) PATCH(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PATCH", reflect.TypeOf((*MockIRoutes)(nil).PATCH), varargs...)
}

// POST mocks base method.
func (m *MockIRoutes) POST(arg0 string, arg1 ...HandlerFunc) IRoutes {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "POST", varargs...)
	ret0, _ := ret[0].(IRoutes)
	return ret0
}

// POST indicates an expected call of POST.
func (mr *MockIRoutesMockRecorder) POST(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "POST", reflect.TypeOf((*MockIRoutes)(nil).POST), varargs...)
}

// PUT mocks base method.
func (m *MockIRoutes) PUT(arg0 string, arg1 ...HandlerFunc) IRoutes {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PUT", varargs...)
	ret0, _ := ret[0].(IRoutes)
	return ret0
}

// PUT indicates an expected call of PUT.
func (mr *MockIRoutesMockRecorder) PUT(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PUT", reflect.TypeOf((*MockIRoutes)(nil).PUT), varargs...)
}

// Use mocks base method.
func (m *MockIRoutes) Use(arg0 ...HandlerFunc) IRoutes {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Use", varargs...)
	ret0, _ := ret[0].(IRoutes)
	return ret0
}

// Use indicates an expected call of Use.
func (mr *MockIRoutesMockRecorder) Use(arg0 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Use", reflect.TypeOf((*MockIRoutes)(nil).Use), arg0...)
}

// MockIRouter is a mock of IRouter interface.
type MockIRouter struct {
	ctrl     *gomock.Controller
	recorder *MockIRouterMockRecorder
	isgomock struct{}
}

// MockIRouterMockRecorder is the mock recorder for MockIRouter.
type MockIRouterMockRecorder struct {
	mock *MockIRouter
}

// NewMockIRouter creates a new mock instance.
func NewMockIRouter(ctrl *gomock.Controller) *MockIRouter {
	mock := &MockIRouter{ctrl: ctrl}
	mock.recorder = &MockIRouterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRouter) EXPECT() *MockIRouterMockRecorder {
	return m.recorder
}

// Any mocks base method.
func (m *MockIRouter) Any(arg0 string, arg1 ...HandlerFunc) IRoutes {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Any", varargs...)
	ret0, _ := ret[0].(IRoutes)
	return ret0
}

// Any indicates an expected call of Any.
func (mr *MockIRouterMockRecorder) Any(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Any", reflect.TypeOf((*MockIRouter)(nil).Any), varargs...)
}

// DELETE mocks base method.
func (m *MockIRouter) DELETE(arg0 string, arg1 ...HandlerFunc) IRoutes {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DELETE", varargs...)
	ret0, _ := ret[0].(IRoutes)
	return ret0
}

// DELETE indicates an expected call of DELETE.
func (mr *MockIRouterMockRecorder) DELETE(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DELETE", reflect.TypeOf((*MockIRouter)(nil).DELETE), varargs...)
}

// GET mocks base method.
func (m *MockIRouter) GET(arg0 string, arg1 ...HandlerFunc) IRoutes {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GET", varargs...)
	ret0, _ := ret[0].(IRoutes)
	return ret0
}

// GET indicates an expected call of GET.
func (mr *MockIRouterMockRecorder) GET(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GET", reflect.TypeOf((*MockIRouter)(nil).GET), varargs...)
}

// GetGinRouter mocks base method.
func (m *MockIRouter) GetGinRouter() gin.IRouter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGinRouter")
	ret0, _ := ret[0].(gin.IRouter)
	return ret0
}

// GetGinRouter indicates an expected call of GetGinRouter.
func (mr *MockIRouterMockRecorder) GetGinRouter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGinRouter", reflect.TypeOf((*MockIRouter)(nil).GetGinRouter))
}

// Group mocks base method.
func (m *MockIRouter) Group(arg0 string, arg1 ...HandlerFunc) RouteGroup {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Group", varargs...)
	ret0, _ := ret[0].(RouteGroup)
	return ret0
}

// Group indicates an expected call of Group.
func (mr *MockIRouterMockRecorder) Group(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Group", reflect.TypeOf((*MockIRouter)(nil).Group), varargs...)
}

// HEAD mocks base method.
func (m *MockIRouter) HEAD(arg0 string, arg1 ...HandlerFunc) IRoutes {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HEAD", varargs...)
	ret0, _ := ret[0].(IRoutes)
	return ret0
}

// HEAD indicates an expected call of HEAD.
func (mr *MockIRouterMockRecorder) HEAD(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HEAD", reflect.TypeOf((*MockIRouter)(nil).HEAD), varargs...)
}

// Handle mocks base method.
func (m *MockIRouter) Handle(arg0, arg1 string, arg2 ...HandlerFunc) IRoutes {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Handle", varargs...)
	ret0, _ := ret[0].(IRoutes)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockIRouterMockRecorder) Handle(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockIRouter)(nil).Handle), varargs...)
}

// LoadHTMLGlob mocks base method.
func (m *MockIRouter) LoadHTMLGlob(pattern string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LoadHTMLGlob", pattern)
}

// LoadHTMLGlob indicates an expected call of LoadHTMLGlob.
func (mr *MockIRouterMockRecorder) LoadHTMLGlob(pattern any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadHTMLGlob", reflect.TypeOf((*MockIRouter)(nil).LoadHTMLGlob), pattern)
}

// OPTIONS mocks base method.
func (m *MockIRouter) OPTIONS(arg0 string, arg1 ...HandlerFunc) IRoutes {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OPTIONS", varargs...)
	ret0, _ := ret[0].(IRoutes)
	return ret0
}

// OPTIONS indicates an expected call of OPTIONS.
func (mr *MockIRouterMockRecorder) OPTIONS(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OPTIONS", reflect.TypeOf((*MockIRouter)(nil).OPTIONS), varargs...)
}

// PATCH mocks base method.
func (m *MockIRouter) PATCH(arg0 string, arg1 ...HandlerFunc) IRoutes {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PATCH", varargs...)
	ret0, _ := ret[0].(IRoutes)
	return ret0
}

// PATCH indicates an expected call of PATCH.
func (mr *MockIRouterMockRecorder) PATCH(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PATCH", reflect.TypeOf((*MockIRouter)(nil).PATCH), varargs...)
}

// POST mocks base method.
func (m *MockIRouter) POST(arg0 string, arg1 ...HandlerFunc) IRoutes {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "POST", varargs...)
	ret0, _ := ret[0].(IRoutes)
	return ret0
}

// POST indicates an expected call of POST.
func (mr *MockIRouterMockRecorder) POST(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "POST", reflect.TypeOf((*MockIRouter)(nil).POST), varargs...)
}

// PUT mocks base method.
func (m *MockIRouter) PUT(arg0 string, arg1 ...HandlerFunc) IRoutes {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PUT", varargs...)
	ret0, _ := ret[0].(IRoutes)
	return ret0
}

// PUT indicates an expected call of PUT.
func (mr *MockIRouterMockRecorder) PUT(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PUT", reflect.TypeOf((*MockIRouter)(nil).PUT), varargs...)
}

// Use mocks base method.
func (m *MockIRouter) Use(arg0 ...HandlerFunc) IRoutes {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Use", varargs...)
	ret0, _ := ret[0].(IRoutes)
	return ret0
}

// Use indicates an expected call of Use.
func (mr *MockIRouterMockRecorder) Use(arg0 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Use", reflect.TypeOf((*MockIRouter)(nil).Use), arg0...)
}

// MockRouteGroup is a mock of RouteGroup interface.
type MockRouteGroup struct {
	ctrl     *gomock.Controller
	recorder *MockRouteGroupMockRecorder
	isgomock struct{}
}

// MockRouteGroupMockRecorder is the mock recorder for MockRouteGroup.
type MockRouteGroupMockRecorder struct {
	mock *MockRouteGroup
}

// NewMockRouteGroup creates a new mock instance.
func NewMockRouteGroup(ctrl *gomock.Controller) *MockRouteGroup {
	mock := &MockRouteGroup{ctrl: ctrl}
	mock.recorder = &MockRouteGroupMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouteGroup) EXPECT() *MockRouteGroupMockRecorder {
	return m.recorder
}

// Any mocks base method.
func (m *MockRouteGroup) Any(arg0 string, arg1 ...HandlerFunc) IRoutes {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Any", varargs...)
	ret0, _ := ret[0].(IRoutes)
	return ret0
}

// Any indicates an expected call of Any.
func (mr *MockRouteGroupMockRecorder) Any(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Any", reflect.TypeOf((*MockRouteGroup)(nil).Any), varargs...)
}

// DELETE mocks base method.
func (m *MockRouteGroup) DELETE(arg0 string, arg1 ...HandlerFunc) IRoutes {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DELETE", varargs...)
	ret0, _ := ret[0].(IRoutes)
	return ret0
}

// DELETE indicates an expected call of DELETE.
func (mr *MockRouteGroupMockRecorder) DELETE(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DELETE", reflect.TypeOf((*MockRouteGroup)(nil).DELETE), varargs...)
}

// GET mocks base method.
func (m *MockRouteGroup) GET(arg0 string, arg1 ...HandlerFunc) IRoutes {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GET", varargs...)
	ret0, _ := ret[0].(IRoutes)
	return ret0
}

// GET indicates an expected call of GET.
func (mr *MockRouteGroupMockRecorder) GET(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GET", reflect.TypeOf((*MockRouteGroup)(nil).GET), varargs...)
}

// GetGinRouter mocks base method.
func (m *MockRouteGroup) GetGinRouter() gin.IRouter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGinRouter")
	ret0, _ := ret[0].(gin.IRouter)
	return ret0
}

// GetGinRouter indicates an expected call of GetGinRouter.
func (mr *MockRouteGroupMockRecorder) GetGinRouter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGinRouter", reflect.TypeOf((*MockRouteGroup)(nil).GetGinRouter))
}

// Group mocks base method.
func (m *MockRouteGroup) Group(arg0 string, arg1 ...HandlerFunc) RouteGroup {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Group", varargs...)
	ret0, _ := ret[0].(RouteGroup)
	return ret0
}

// Group indicates an expected call of Group.
func (mr *MockRouteGroupMockRecorder) Group(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Group", reflect.TypeOf((*MockRouteGroup)(nil).Group), varargs...)
}

// HEAD mocks base method.
func (m *MockRouteGroup) HEAD(arg0 string, arg1 ...HandlerFunc) IRoutes {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HEAD", varargs...)
	ret0, _ := ret[0].(IRoutes)
	return ret0
}

// HEAD indicates an expected call of HEAD.
func (mr *MockRouteGroupMockRecorder) HEAD(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HEAD", reflect.TypeOf((*MockRouteGroup)(nil).HEAD), varargs...)
}

// Handle mocks base method.
func (m *MockRouteGroup) Handle(arg0, arg1 string, arg2 ...HandlerFunc) IRoutes {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Handle", varargs...)
	ret0, _ := ret[0].(IRoutes)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockRouteGroupMockRecorder) Handle(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockRouteGroup)(nil).Handle), varargs...)
}

// LoadHTMLGlob mocks base method.
func (m *MockRouteGroup) LoadHTMLGlob(pattern string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LoadHTMLGlob", pattern)
}

// LoadHTMLGlob indicates an expected call of LoadHTMLGlob.
func (mr *MockRouteGroupMockRecorder) LoadHTMLGlob(pattern any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadHTMLGlob", reflect.TypeOf((*MockRouteGroup)(nil).LoadHTMLGlob), pattern)
}

// OPTIONS mocks base method.
func (m *MockRouteGroup) OPTIONS(arg0 string, arg1 ...HandlerFunc) IRoutes {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OPTIONS", varargs...)
	ret0, _ := ret[0].(IRoutes)
	return ret0
}

// OPTIONS indicates an expected call of OPTIONS.
func (mr *MockRouteGroupMockRecorder) OPTIONS(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OPTIONS", reflect.TypeOf((*MockRouteGroup)(nil).OPTIONS), varargs...)
}

// PATCH mocks base method.
func (m *MockRouteGroup) PATCH(arg0 string, arg1 ...HandlerFunc) IRoutes {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PATCH", varargs...)
	ret0, _ := ret[0].(IRoutes)
	return ret0
}

// PATCH indicates an expected call of PATCH.
func (mr *MockRouteGroupMockRecorder) PATCH(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PATCH", reflect.TypeOf((*MockRouteGroup)(nil).PATCH), varargs...)
}

// POST mocks base method.
func (m *MockRouteGroup) POST(arg0 string, arg1 ...HandlerFunc) IRoutes {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "POST", varargs...)
	ret0, _ := ret[0].(IRoutes)
	return ret0
}

// POST indicates an expected call of POST.
func (mr *MockRouteGroupMockRecorder) POST(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "POST", reflect.TypeOf((*MockRouteGroup)(nil).POST), varargs...)
}

// PUT mocks base method.
func (m *MockRouteGroup) PUT(arg0 string, arg1 ...HandlerFunc) IRoutes {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PUT", varargs...)
	ret0, _ := ret[0].(IRoutes)
	return ret0
}

// PUT indicates an expected call of PUT.
func (mr *MockRouteGroupMockRecorder) PUT(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PUT", reflect.TypeOf((*MockRouteGroup)(nil).PUT), varargs...)
}

// Use mocks base method.
func (m *MockRouteGroup) Use(arg0 ...HandlerFunc) IRoutes {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Use", varargs...)
	ret0, _ := ret[0].(IRoutes)
	return ret0
}

// Use indicates an expected call of Use.
func (mr *MockRouteGroupMockRecorder) Use(arg0 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Use", reflect.TypeOf((*MockRouteGroup)(nil).Use), arg0...)
}

// MockController is a mock of Controller interface.
type MockController struct {
	ctrl     *gomock.Controller
	recorder *MockControllerMockRecorder
	isgomock struct{}
}

// MockControllerMockRecorder is the mock recorder for MockController.
type MockControllerMockRecorder struct {
	mock *MockController
}

// NewMockController creates a new mock instance.
func NewMockController(ctrl *gomock.Controller) *MockController {
	mock := &MockController{ctrl: ctrl}
	mock.recorder = &MockControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockController) EXPECT() *MockControllerMockRecorder {
	return m.recorder
}

// Mount mocks base method.
func (m *MockController) Mount() MountError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mount")
	ret0, _ := ret[0].(MountError)
	return ret0
}

// Mount indicates an expected call of Mount.
func (mr *MockControllerMockRecorder) Mount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mount", reflect.TypeOf((*MockController)(nil).Mount))
}

// MockHandleProxyToGin is a mock of HandleProxyToGin interface.
type MockHandleProxyToGin struct {
	ctrl     *gomock.Controller
	recorder *MockHandleProxyToGinMockRecorder
	isgomock struct{}
}

// MockHandleProxyToGinMockRecorder is the mock recorder for MockHandleProxyToGin.
type MockHandleProxyToGinMockRecorder struct {
	mock *MockHandleProxyToGin
}

// NewMockHandleProxyToGin creates a new mock instance.
func NewMockHandleProxyToGin(ctrl *gomock.Controller) *MockHandleProxyToGin {
	mock := &MockHandleProxyToGin{ctrl: ctrl}
	mock.recorder = &MockHandleProxyToGinMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandleProxyToGin) EXPECT() *MockHandleProxyToGinMockRecorder {
	return m.recorder
}

// Proxy mocks base method.
func (m *MockHandleProxyToGin) Proxy(handler ...HandlerFunc) []gin.HandlerFunc {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range handler {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Proxy", varargs...)
	ret0, _ := ret[0].([]gin.HandlerFunc)
	return ret0
}

// Proxy indicates an expected call of Proxy.
func (mr *MockHandleProxyToGinMockRecorder) Proxy(handler ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Proxy", reflect.TypeOf((*MockHandleProxyToGin)(nil).Proxy), handler...)
}

// ProxyForMiddleware mocks base method.
func (m *MockHandleProxyToGin) ProxyForMiddleware(handlers ...HandlerFunc) []gin.HandlerFunc {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range handlers {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProxyForMiddleware", varargs...)
	ret0, _ := ret[0].([]gin.HandlerFunc)
	return ret0
}

// ProxyForMiddleware indicates an expected call of ProxyForMiddleware.
func (mr *MockHandleProxyToGinMockRecorder) ProxyForMiddleware(handlers ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProxyForMiddleware", reflect.TypeOf((*MockHandleProxyToGin)(nil).ProxyForMiddleware), handlers...)
}

// MockXContext is a mock of XContext interface.
type MockXContext struct {
	ctrl     *gomock.Controller
	recorder *MockXContextMockRecorder
	isgomock struct{}
}

// MockXContextMockRecorder is the mock recorder for MockXContext.
type MockXContextMockRecorder struct {
	mock *MockXContext
}

// NewMockXContext creates a new mock instance.
func NewMockXContext(ctrl *gomock.Controller) *MockXContext {
	mock := &MockXContext{ctrl: ctrl}
	mock.recorder = &MockXContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockXContext) EXPECT() *MockXContextMockRecorder {
	return m.recorder
}

// Abort mocks base method.
func (m *MockXContext) Abort() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Abort")
}

// Abort indicates an expected call of Abort.
func (mr *MockXContextMockRecorder) Abort() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Abort", reflect.TypeOf((*MockXContext)(nil).Abort))
}

// JSON mocks base method.
func (m *MockXContext) JSON(code int, obj any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "JSON", code, obj)
}

// JSON indicates an expected call of JSON.
func (mr *MockXContextMockRecorder) JSON(code, obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSON", reflect.TypeOf((*MockXContext)(nil).JSON), code, obj)
}

// String mocks base method.
func (m *MockXContext) String(code int, format string, values ...any) {
	m.ctrl.T.Helper()
	varargs := []any{code, format}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "String", varargs...)
}

// String indicates an expected call of String.
func (mr *MockXContextMockRecorder) String(code, format any, values ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{code, format}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockXContext)(nil).String), varargs...)
}

// MockWrappedDataFuncSetter is a mock of WrappedDataFuncSetter interface.
type MockWrappedDataFuncSetter struct {
	ctrl     *gomock.Controller
	recorder *MockWrappedDataFuncSetterMockRecorder
	isgomock struct{}
}

// MockWrappedDataFuncSetterMockRecorder is the mock recorder for MockWrappedDataFuncSetter.
type MockWrappedDataFuncSetterMockRecorder struct {
	mock *MockWrappedDataFuncSetter
}

// NewMockWrappedDataFuncSetter creates a new mock instance.
func NewMockWrappedDataFuncSetter(ctrl *gomock.Controller) *MockWrappedDataFuncSetter {
	mock := &MockWrappedDataFuncSetter{ctrl: ctrl}
	mock.recorder = &MockWrappedDataFuncSetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWrappedDataFuncSetter) EXPECT() *MockWrappedDataFuncSetterMockRecorder {
	return m.recorder
}

// SetWrappedDataFunc mocks base method.
func (m *MockWrappedDataFuncSetter) SetWrappedDataFunc(wrappedDataFunc WrappedDataFunc) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetWrappedDataFunc", wrappedDataFunc)
}

// SetWrappedDataFunc indicates an expected call of SetWrappedDataFunc.
func (mr *MockWrappedDataFuncSetterMockRecorder) SetWrappedDataFunc(wrappedDataFunc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWrappedDataFunc", reflect.TypeOf((*MockWrappedDataFuncSetter)(nil).SetWrappedDataFunc), wrappedDataFunc)
}

// MockResponser is a mock of Responser interface.
type MockResponser struct {
	ctrl     *gomock.Controller
	recorder *MockResponserMockRecorder
	isgomock struct{}
}

// MockResponserMockRecorder is the mock recorder for MockResponser.
type MockResponserMockRecorder struct {
	mock *MockResponser
}

// NewMockResponser creates a new mock instance.
func NewMockResponser(ctrl *gomock.Controller) *MockResponser {
	mock := &MockResponser{ctrl: ctrl}
	mock.recorder = &MockResponserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResponser) EXPECT() *MockResponserMockRecorder {
	return m.recorder
}

// Failed mocks base method.
func (m *MockResponser) Failed(ctx XContext, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Failed", ctx, err)
}

// Failed indicates an expected call of Failed.
func (mr *MockResponserMockRecorder) Failed(ctx, err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Failed", reflect.TypeOf((*MockResponser)(nil).Failed), ctx, err)
}

// ProcessResults mocks base method.
func (m *MockResponser) ProcessResults(context XContext, writer gin.ResponseWriter, last bool, funcName string, results ...any) {
	m.ctrl.T.Helper()
	varargs := []any{context, writer, last, funcName}
	for _, a := range results {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "ProcessResults", varargs...)
}

// ProcessResults indicates an expected call of ProcessResults.
func (mr *MockResponserMockRecorder) ProcessResults(context, writer, last, funcName any, results ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{context, writer, last, funcName}, results...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessResults", reflect.TypeOf((*MockResponser)(nil).ProcessResults), varargs...)
}

// Success mocks base method.
func (m *MockResponser) Success(ctx XContext, data any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Success", ctx, data)
}

// Success indicates an expected call of Success.
func (mr *MockResponserMockRecorder) Success(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Success", reflect.TypeOf((*MockResponser)(nil).Success), ctx, data)
}

// MockHttInjector is a mock of HttInjector interface.
type MockHttInjector struct {
	ctrl     *gomock.Controller
	recorder *MockHttInjectorMockRecorder
	isgomock struct{}
}

// MockHttInjectorMockRecorder is the mock recorder for MockHttInjector.
type MockHttInjectorMockRecorder struct {
	mock *MockHttInjector
}

// NewMockHttInjector creates a new mock instance.
func NewMockHttInjector(ctrl *gomock.Controller) *MockHttInjector {
	mock := &MockHttInjector{ctrl: ctrl}
	mock.recorder = &MockHttInjectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHttInjector) EXPECT() *MockHttInjectorMockRecorder {
	return m.recorder
}

// BindFuncs mocks base method.
func (m *MockHttInjector) BindFuncs() BindStructFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindFuncs")
	ret0, _ := ret[0].(BindStructFunc)
	return ret0
}

// BindFuncs indicates an expected call of BindFuncs.
func (mr *MockHttInjectorMockRecorder) BindFuncs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindFuncs", reflect.TypeOf((*MockHttInjector)(nil).BindFuncs))
}

// StartBindFuncs mocks base method.
func (m *MockHttInjector) StartBindFuncs() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartBindFuncs")
}

// StartBindFuncs indicates an expected call of StartBindFuncs.
func (mr *MockHttInjectorMockRecorder) StartBindFuncs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartBindFuncs", reflect.TypeOf((*MockHttInjector)(nil).StartBindFuncs))
}

// MockMiddleware is a mock of Middleware interface.
type MockMiddleware struct {
	ctrl     *gomock.Controller
	recorder *MockMiddlewareMockRecorder
	isgomock struct{}
}

// MockMiddlewareMockRecorder is the mock recorder for MockMiddleware.
type MockMiddlewareMockRecorder struct {
	mock *MockMiddleware
}

// NewMockMiddleware creates a new mock instance.
func NewMockMiddleware(ctrl *gomock.Controller) *MockMiddleware {
	mock := &MockMiddleware{ctrl: ctrl}
	mock.recorder = &MockMiddlewareMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMiddleware) EXPECT() *MockMiddlewareMockRecorder {
	return m.recorder
}

// Process mocks base method.
func (m *MockMiddleware) Process(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Process", ctx)
}

// Process indicates an expected call of Process.
func (mr *MockMiddlewareMockRecorder) Process(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockMiddleware)(nil).Process), ctx)
}

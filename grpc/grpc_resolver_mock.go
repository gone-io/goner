// Code generated by MockGen. DO NOT EDIT.
// Source: google.golang.org/grpc/resolver (interfaces: ClientConn)
//
// Generated by this command:
//
//	mockgen -package=grpc -destination=grpc_resolver_mock.go google.golang.org/grpc/resolver ClientConn
//

// Package grpc is a generated GoMock package.
package grpc

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	resolver "google.golang.org/grpc/resolver"
	serviceconfig "google.golang.org/grpc/serviceconfig"
)

// MockClientConn is a mock of ClientConn interface.
type MockClientConn struct {
	ctrl     *gomock.Controller
	recorder *MockClientConnMockRecorder
	isgomock struct{}
}

// MockClientConnMockRecorder is the mock recorder for MockClientConn.
type MockClientConnMockRecorder struct {
	mock *MockClientConn
}

// NewMockClientConn creates a new mock instance.
func NewMockClientConn(ctrl *gomock.Controller) *MockClientConn {
	mock := &MockClientConn{ctrl: ctrl}
	mock.recorder = &MockClientConnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientConn) EXPECT() *MockClientConnMockRecorder {
	return m.recorder
}

// NewAddress mocks base method.
func (m *MockClientConn) NewAddress(addresses []resolver.Address) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NewAddress", addresses)
}

// NewAddress indicates an expected call of NewAddress.
func (mr *MockClientConnMockRecorder) NewAddress(addresses any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewAddress", reflect.TypeOf((*MockClientConn)(nil).NewAddress), addresses)
}

// ParseServiceConfig mocks base method.
func (m *MockClientConn) ParseServiceConfig(serviceConfigJSON string) *serviceconfig.ParseResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseServiceConfig", serviceConfigJSON)
	ret0, _ := ret[0].(*serviceconfig.ParseResult)
	return ret0
}

// ParseServiceConfig indicates an expected call of ParseServiceConfig.
func (mr *MockClientConnMockRecorder) ParseServiceConfig(serviceConfigJSON any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseServiceConfig", reflect.TypeOf((*MockClientConn)(nil).ParseServiceConfig), serviceConfigJSON)
}

// ReportError mocks base method.
func (m *MockClientConn) ReportError(arg0 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReportError", arg0)
}

// ReportError indicates an expected call of ReportError.
func (mr *MockClientConnMockRecorder) ReportError(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportError", reflect.TypeOf((*MockClientConn)(nil).ReportError), arg0)
}

// UpdateState mocks base method.
func (m *MockClientConn) UpdateState(arg0 resolver.State) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateState", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateState indicates an expected call of UpdateState.
func (mr *MockClientConnMockRecorder) UpdateState(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateState", reflect.TypeOf((*MockClientConn)(nil).UpdateState), arg0)
}

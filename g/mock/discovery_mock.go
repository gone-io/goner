// Code generated by MockGen. DO NOT EDIT.
// Source: ../discovery.go
//
// Generated by this command:
//
//	mockgen -package=mock -source=../discovery.go -destination=./discovery_mock.go
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	g "github.com/gone-io/goner/g"
	gomock "go.uber.org/mock/gomock"
)

// MockServiceDiscovery is a mock of ServiceDiscovery interface.
type MockServiceDiscovery struct {
	ctrl     *gomock.Controller
	recorder *MockServiceDiscoveryMockRecorder
	isgomock struct{}
}

// MockServiceDiscoveryMockRecorder is the mock recorder for MockServiceDiscovery.
type MockServiceDiscoveryMockRecorder struct {
	mock *MockServiceDiscovery
}

// NewMockServiceDiscovery creates a new mock instance.
func NewMockServiceDiscovery(ctrl *gomock.Controller) *MockServiceDiscovery {
	mock := &MockServiceDiscovery{ctrl: ctrl}
	mock.recorder = &MockServiceDiscoveryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceDiscovery) EXPECT() *MockServiceDiscoveryMockRecorder {
	return m.recorder
}

// GetInstances mocks base method.
func (m *MockServiceDiscovery) GetInstances(serviceName string) ([]g.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstances", serviceName)
	ret0, _ := ret[0].([]g.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstances indicates an expected call of GetInstances.
func (mr *MockServiceDiscoveryMockRecorder) GetInstances(serviceName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstances", reflect.TypeOf((*MockServiceDiscovery)(nil).GetInstances), serviceName)
}

// Watch mocks base method.
func (m *MockServiceDiscovery) Watch(serviceName string) (<-chan []g.Service, func() error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", serviceName)
	ret0, _ := ret[0].(<-chan []g.Service)
	ret1, _ := ret[1].(func() error)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Watch indicates an expected call of Watch.
func (mr *MockServiceDiscoveryMockRecorder) Watch(serviceName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockServiceDiscovery)(nil).Watch), serviceName)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: ../balancer.go
//
// Generated by this command:
//
//	mockgen -package=mock -source=../balancer.go -destination=./balancer_mock.go
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	g "github.com/gone-io/goner/g"
	gomock "go.uber.org/mock/gomock"
)

// MockLoadBalancer is a mock of LoadBalancer interface.
type MockLoadBalancer struct {
	ctrl     *gomock.Controller
	recorder *MockLoadBalancerMockRecorder
	isgomock struct{}
}

// MockLoadBalancerMockRecorder is the mock recorder for MockLoadBalancer.
type MockLoadBalancerMockRecorder struct {
	mock *MockLoadBalancer
}

// NewMockLoadBalancer creates a new mock instance.
func NewMockLoadBalancer(ctrl *gomock.Controller) *MockLoadBalancer {
	mock := &MockLoadBalancer{ctrl: ctrl}
	mock.recorder = &MockLoadBalancerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoadBalancer) EXPECT() *MockLoadBalancerMockRecorder {
	return m.recorder
}

// GetInstance mocks base method.
func (m *MockLoadBalancer) GetInstance(ctx context.Context, serviceName string) (g.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstance", ctx, serviceName)
	ret0, _ := ret[0].(g.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstance indicates an expected call of GetInstance.
func (mr *MockLoadBalancerMockRecorder) GetInstance(ctx, serviceName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstance", reflect.TypeOf((*MockLoadBalancer)(nil).GetInstance), ctx, serviceName)
}

// MockLoadBalanceStrategy is a mock of LoadBalanceStrategy interface.
type MockLoadBalanceStrategy struct {
	ctrl     *gomock.Controller
	recorder *MockLoadBalanceStrategyMockRecorder
	isgomock struct{}
}

// MockLoadBalanceStrategyMockRecorder is the mock recorder for MockLoadBalanceStrategy.
type MockLoadBalanceStrategyMockRecorder struct {
	mock *MockLoadBalanceStrategy
}

// NewMockLoadBalanceStrategy creates a new mock instance.
func NewMockLoadBalanceStrategy(ctrl *gomock.Controller) *MockLoadBalanceStrategy {
	mock := &MockLoadBalanceStrategy{ctrl: ctrl}
	mock.recorder = &MockLoadBalanceStrategyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoadBalanceStrategy) EXPECT() *MockLoadBalanceStrategyMockRecorder {
	return m.recorder
}

// Select mocks base method.
func (m *MockLoadBalanceStrategy) Select(ctx context.Context, instances []g.Service) (g.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Select", ctx, instances)
	ret0, _ := ret[0].(g.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Select indicates an expected call of Select.
func (mr *MockLoadBalanceStrategyMockRecorder) Select(ctx, instances any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockLoadBalanceStrategy)(nil).Select), ctx, instances)
}

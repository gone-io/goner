// Code generated by MockGen. DO NOT EDIT.
// Source: ../tracer.go
//
// Generated by this command:
//
//	mockgen -package=mock -source=../tracer.go -destination=./tracer_mock.go
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTracer is a mock of Tracer interface.
type MockTracer struct {
	ctrl     *gomock.Controller
	recorder *MockTracerMockRecorder
	isgomock struct{}
}

// MockTracerMockRecorder is the mock recorder for MockTracer.
type MockTracerMockRecorder struct {
	mock *MockTracer
}

// NewMockTracer creates a new mock instance.
func NewMockTracer(ctrl *gomock.Controller) *MockTracer {
	mock := &MockTracer{ctrl: ctrl}
	mock.recorder = &MockTracerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTracer) EXPECT() *MockTracerMockRecorder {
	return m.recorder
}

// GetTraceId mocks base method.
func (m *MockTracer) GetTraceId() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTraceId")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetTraceId indicates an expected call of GetTraceId.
func (mr *MockTracerMockRecorder) GetTraceId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTraceId", reflect.TypeOf((*MockTracer)(nil).GetTraceId))
}

// Go mocks base method.
func (m *MockTracer) Go(fn func()) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Go", fn)
}

// Go indicates an expected call of Go.
func (mr *MockTracerMockRecorder) Go(fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Go", reflect.TypeOf((*MockTracer)(nil).Go), fn)
}

// SetTraceId mocks base method.
func (m *MockTracer) SetTraceId(traceId string, fn func()) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTraceId", traceId, fn)
}

// SetTraceId indicates an expected call of SetTraceId.
func (mr *MockTracerMockRecorder) SetTraceId(traceId, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTraceId", reflect.TypeOf((*MockTracer)(nil).SetTraceId), traceId, fn)
}

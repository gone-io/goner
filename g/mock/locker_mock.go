// Code generated by MockGen. DO NOT EDIT.
// Source: ../locker.go
//
// Generated by this command:
//
//	mockgen -package=mock -source=../locker.go -destination=./locker_mock.go
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockDoLocker is a mock of DoLocker interface.
type MockDoLocker struct {
	ctrl     *gomock.Controller
	recorder *MockDoLockerMockRecorder
	isgomock struct{}
}

// MockDoLockerMockRecorder is the mock recorder for MockDoLocker.
type MockDoLockerMockRecorder struct {
	mock *MockDoLocker
}

// NewMockDoLocker creates a new mock instance.
func NewMockDoLocker(ctrl *gomock.Controller) *MockDoLocker {
	mock := &MockDoLocker{ctrl: ctrl}
	mock.recorder = &MockDoLockerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDoLocker) EXPECT() *MockDoLockerMockRecorder {
	return m.recorder
}

// LockAndDo mocks base method.
func (m *MockDoLocker) LockAndDo(key string, fn func(), lockTime, checkPeriod time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockAndDo", key, fn, lockTime, checkPeriod)
	ret0, _ := ret[0].(error)
	return ret0
}

// LockAndDo indicates an expected call of LockAndDo.
func (mr *MockDoLockerMockRecorder) LockAndDo(key, fn, lockTime, checkPeriod any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockAndDo", reflect.TypeOf((*MockDoLocker)(nil).LockAndDo), key, fn, lockTime, checkPeriod)
}

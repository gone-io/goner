name: Test and coverage

on:
  push:
    paths-ignore:
      - 'examples/**'
      - '**.md'
      - '**.yaml'
  pull_request:
    paths-ignore:
      - 'examples/**'
      - '**.md'
      - '**.yaml'

# 设置工作流的权限为只读
permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        go-version:
          - '1.24'
    services:
      etcd:
        image: bitnami/etcd:3.4.24
        env:
          ALLOW_NONE_AUTHENTICATION: yes
        ports:
          - 2379:2379
      redis:
        image: redis
        ports:
          - 6379:6379
      consul:
        image: consul:1.15
        ports:
          - "8500:8500"
          - "8600:8600/tcp"
          - "8600:8600/udp"
        options: --health-cmd "curl -f http://localhost:8500/v1/status/leader || exit 1"

      elasticsearch:
        image: elasticsearch:8.12.1
        env:
          discovery.type: single-node
          xpack.security.enabled: false
        ports:
          - 9200:9200
        options: >-
          --health-cmd "curl -f http://localhost:9200/_cluster/health || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      kafka:
        image: docker.io/bitnami/kafka:4.0
        env:
          KAFKA_CFG_NODE_ID: 0
          KAFKA_CFG_PROCESS_ROLES: controller,broker
          KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 0@kafka:9093
          KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
          KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://127.0.0.1:9092
          KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
          KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
          KAFKA_CFG_INTER_BROKER_LISTENER_NAME: PLAINTEXT
          KAFKA_CREATE_TOPICS: "my-topic:1:1,another-topic:2:1"
        ports:
          - 9092:9092
        options: >-
          --health-cmd "kafka-topics.sh --bootstrap-server localhost:9092 --list"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      rabbitmq:
        image: rabbitmq:management
        ports:
          - 5672:5672
        options:
          --health-cmd "rabbitmqctl status"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      mongo:
        image: mongo:8.0
        env:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: example
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Install SQLite
        run: sudo apt-get update && sudo apt-get install -y sqlite3 libsqlite3-dev
      - uses: actions/checkout@v5
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
      - name: Gather dependencies
        run: go mod download
      - name: Run coverage
        run: find . -name go.mod -not -path "*/example/*" -not -path "*/examples/*" | xargs -n1 dirname | xargs -L1 bash -c 'cd "$0" && pwd && go test -race -coverprofile=coverage.txt -covermode=atomic ./... || exit 255'
      - name: Merge coverage
        run: find . -name "coverage.txt" -exec cat {} \; > total_coverage.txt
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
            token: ${{ secrets.CODECOV_TOKEN }}
            files: ./total_coverage.txt

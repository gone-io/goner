// Code generated by MockGen. DO NOT EDIT.
// Source: go.etcd.io/etcd/client/v3 (interfaces: KV,Lease)
//
// Generated by this command:
//
//	mockgen -destination=etcd_mock.go -package=etcd go.etcd.io/etcd/client/v3 KV,Lease
//

// Package etcd is a generated GoMock package.
package etcd

import (
	context "context"
	reflect "reflect"

	v3 "go.etcd.io/etcd/client/v3"
	gomock "go.uber.org/mock/gomock"
)

// MockKV is a mock of KV interface.
type MockKV struct {
	ctrl     *gomock.Controller
	recorder *MockKVMockRecorder
	isgomock struct{}
}

// MockKVMockRecorder is the mock recorder for MockKV.
type MockKVMockRecorder struct {
	mock *MockKV
}

// NewMockKV creates a new mock instance.
func NewMockKV(ctrl *gomock.Controller) *MockKV {
	mock := &MockKV{ctrl: ctrl}
	mock.recorder = &MockKVMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKV) EXPECT() *MockKVMockRecorder {
	return m.recorder
}

// Compact mocks base method.
func (m *MockKV) Compact(ctx context.Context, rev int64, opts ...v3.CompactOption) (*v3.CompactResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, rev}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Compact", varargs...)
	ret0, _ := ret[0].(*v3.CompactResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Compact indicates an expected call of Compact.
func (mr *MockKVMockRecorder) Compact(ctx, rev any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, rev}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Compact", reflect.TypeOf((*MockKV)(nil).Compact), varargs...)
}

// Delete mocks base method.
func (m *MockKV) Delete(ctx context.Context, key string, opts ...v3.OpOption) (*v3.DeleteResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*v3.DeleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockKVMockRecorder) Delete(ctx, key any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockKV)(nil).Delete), varargs...)
}

// Do mocks base method.
func (m *MockKV) Do(ctx context.Context, op v3.Op) (v3.OpResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", ctx, op)
	ret0, _ := ret[0].(v3.OpResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockKVMockRecorder) Do(ctx, op any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockKV)(nil).Do), ctx, op)
}

// Get mocks base method.
func (m *MockKV) Get(ctx context.Context, key string, opts ...v3.OpOption) (*v3.GetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*v3.GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockKVMockRecorder) Get(ctx, key any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockKV)(nil).Get), varargs...)
}

// Put mocks base method.
func (m *MockKV) Put(ctx context.Context, key, val string, opts ...v3.OpOption) (*v3.PutResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key, val}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Put", varargs...)
	ret0, _ := ret[0].(*v3.PutResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put.
func (mr *MockKVMockRecorder) Put(ctx, key, val any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key, val}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockKV)(nil).Put), varargs...)
}

// Txn mocks base method.
func (m *MockKV) Txn(ctx context.Context) v3.Txn {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Txn", ctx)
	ret0, _ := ret[0].(v3.Txn)
	return ret0
}

// Txn indicates an expected call of Txn.
func (mr *MockKVMockRecorder) Txn(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Txn", reflect.TypeOf((*MockKV)(nil).Txn), ctx)
}

// MockLease is a mock of Lease interface.
type MockLease struct {
	ctrl     *gomock.Controller
	recorder *MockLeaseMockRecorder
	isgomock struct{}
}

// MockLeaseMockRecorder is the mock recorder for MockLease.
type MockLeaseMockRecorder struct {
	mock *MockLease
}

// NewMockLease creates a new mock instance.
func NewMockLease(ctrl *gomock.Controller) *MockLease {
	mock := &MockLease{ctrl: ctrl}
	mock.recorder = &MockLeaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLease) EXPECT() *MockLeaseMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockLease) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockLeaseMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockLease)(nil).Close))
}

// Grant mocks base method.
func (m *MockLease) Grant(ctx context.Context, ttl int64) (*v3.LeaseGrantResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Grant", ctx, ttl)
	ret0, _ := ret[0].(*v3.LeaseGrantResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Grant indicates an expected call of Grant.
func (mr *MockLeaseMockRecorder) Grant(ctx, ttl any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Grant", reflect.TypeOf((*MockLease)(nil).Grant), ctx, ttl)
}

// KeepAlive mocks base method.
func (m *MockLease) KeepAlive(ctx context.Context, id v3.LeaseID) (<-chan *v3.LeaseKeepAliveResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KeepAlive", ctx, id)
	ret0, _ := ret[0].(<-chan *v3.LeaseKeepAliveResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KeepAlive indicates an expected call of KeepAlive.
func (mr *MockLeaseMockRecorder) KeepAlive(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeepAlive", reflect.TypeOf((*MockLease)(nil).KeepAlive), ctx, id)
}

// KeepAliveOnce mocks base method.
func (m *MockLease) KeepAliveOnce(ctx context.Context, id v3.LeaseID) (*v3.LeaseKeepAliveResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KeepAliveOnce", ctx, id)
	ret0, _ := ret[0].(*v3.LeaseKeepAliveResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KeepAliveOnce indicates an expected call of KeepAliveOnce.
func (mr *MockLeaseMockRecorder) KeepAliveOnce(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeepAliveOnce", reflect.TypeOf((*MockLease)(nil).KeepAliveOnce), ctx, id)
}

// Leases mocks base method.
func (m *MockLease) Leases(ctx context.Context) (*v3.LeaseLeasesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Leases", ctx)
	ret0, _ := ret[0].(*v3.LeaseLeasesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Leases indicates an expected call of Leases.
func (mr *MockLeaseMockRecorder) Leases(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Leases", reflect.TypeOf((*MockLease)(nil).Leases), ctx)
}

// Revoke mocks base method.
func (m *MockLease) Revoke(ctx context.Context, id v3.LeaseID) (*v3.LeaseRevokeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Revoke", ctx, id)
	ret0, _ := ret[0].(*v3.LeaseRevokeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Revoke indicates an expected call of Revoke.
func (mr *MockLeaseMockRecorder) Revoke(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Revoke", reflect.TypeOf((*MockLease)(nil).Revoke), ctx, id)
}

// TimeToLive mocks base method.
func (m *MockLease) TimeToLive(ctx context.Context, id v3.LeaseID, opts ...v3.LeaseOption) (*v3.LeaseTimeToLiveResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TimeToLive", varargs...)
	ret0, _ := ret[0].(*v3.LeaseTimeToLiveResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TimeToLive indicates an expected call of TimeToLive.
func (mr *MockLeaseMockRecorder) TimeToLive(ctx, id any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TimeToLive", reflect.TypeOf((*MockLease)(nil).TimeToLive), varargs...)
}

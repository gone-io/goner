// Code generated by MockGen. DO NOT EDIT.
// Source: remote.go
//
// Generated by this command:
//
//	mockgen -source=remote.go -destination=mock_viper_interface_test.go -package=remote
//

// Package remote is a generated GoMock package.
package remote

import (
	reflect "reflect"

	viper "github.com/spf13/viper"
	gomock "go.uber.org/mock/gomock"
)

// MockViperInterface is a mock of ViperInterface interface.
type MockViperInterface struct {
	ctrl     *gomock.Controller
	recorder *MockViperInterfaceMockRecorder
	isgomock struct{}
}

// MockViperInterfaceMockRecorder is the mock recorder for MockViperInterface.
type MockViperInterfaceMockRecorder struct {
	mock *MockViperInterface
}

// NewMockViperInterface creates a new mock instance.
func NewMockViperInterface(ctrl *gomock.Controller) *MockViperInterface {
	mock := &MockViperInterface{ctrl: ctrl}
	mock.recorder = &MockViperInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockViperInterface) EXPECT() *MockViperInterfaceMockRecorder {
	return m.recorder
}

// AddRemoteProvider mocks base method.
func (m *MockViperInterface) AddRemoteProvider(provider, endpoint, path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRemoteProvider", provider, endpoint, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRemoteProvider indicates an expected call of AddRemoteProvider.
func (mr *MockViperInterfaceMockRecorder) AddRemoteProvider(provider, endpoint, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRemoteProvider", reflect.TypeOf((*MockViperInterface)(nil).AddRemoteProvider), provider, endpoint, path)
}

// AddSecureRemoteProvider mocks base method.
func (m *MockViperInterface) AddSecureRemoteProvider(provider, endpoint, path, keyring string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSecureRemoteProvider", provider, endpoint, path, keyring)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSecureRemoteProvider indicates an expected call of AddSecureRemoteProvider.
func (mr *MockViperInterfaceMockRecorder) AddSecureRemoteProvider(provider, endpoint, path, keyring any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSecureRemoteProvider", reflect.TypeOf((*MockViperInterface)(nil).AddSecureRemoteProvider), provider, endpoint, path, keyring)
}

// AllSettings mocks base method.
func (m *MockViperInterface) AllSettings() map[string]any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllSettings")
	ret0, _ := ret[0].(map[string]any)
	return ret0
}

// AllSettings indicates an expected call of AllSettings.
func (mr *MockViperInterfaceMockRecorder) AllSettings() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllSettings", reflect.TypeOf((*MockViperInterface)(nil).AllSettings))
}

// Get mocks base method.
func (m *MockViperInterface) Get(key string) any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(any)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockViperInterfaceMockRecorder) Get(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockViperInterface)(nil).Get), key)
}

// MergeConfigMap mocks base method.
func (m *MockViperInterface) MergeConfigMap(settings map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MergeConfigMap", settings)
	ret0, _ := ret[0].(error)
	return ret0
}

// MergeConfigMap indicates an expected call of MergeConfigMap.
func (mr *MockViperInterfaceMockRecorder) MergeConfigMap(settings any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MergeConfigMap", reflect.TypeOf((*MockViperInterface)(nil).MergeConfigMap), settings)
}

// ReadRemoteConfig mocks base method.
func (m *MockViperInterface) ReadRemoteConfig() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadRemoteConfig")
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadRemoteConfig indicates an expected call of ReadRemoteConfig.
func (mr *MockViperInterfaceMockRecorder) ReadRemoteConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadRemoteConfig", reflect.TypeOf((*MockViperInterface)(nil).ReadRemoteConfig))
}

// SetConfigType mocks base method.
func (m *MockViperInterface) SetConfigType(configType string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetConfigType", configType)
}

// SetConfigType indicates an expected call of SetConfigType.
func (mr *MockViperInterfaceMockRecorder) SetConfigType(configType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConfigType", reflect.TypeOf((*MockViperInterface)(nil).SetConfigType), configType)
}

// UnmarshalKey mocks base method.
func (m *MockViperInterface) UnmarshalKey(key string, rawVal any, opts ...viper.DecoderConfigOption) error {
	m.ctrl.T.Helper()
	varargs := []any{key, rawVal}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnmarshalKey", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnmarshalKey indicates an expected call of UnmarshalKey.
func (mr *MockViperInterfaceMockRecorder) UnmarshalKey(key, rawVal any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{key, rawVal}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmarshalKey", reflect.TypeOf((*MockViperInterface)(nil).UnmarshalKey), varargs...)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gone-io/goner/viper (interfaces: KeyGetter)
//
// Generated by this command:
//
//	mockgen -destination=mock_key_getter_test.go -package=viper github.com/gone-io/goner/viper KeyGetter
//

// Package viper is a generated GoMock package.
package viper

import (
	reflect "reflect"

	viper "github.com/spf13/viper"
	gomock "go.uber.org/mock/gomock"
)

// MockKeyGetter is a mock of KeyGetter interface.
type MockKeyGetter struct {
	ctrl     *gomock.Controller
	recorder *MockKeyGetterMockRecorder
	isgomock struct{}
}

// MockKeyGetterMockRecorder is the mock recorder for MockKeyGetter.
type MockKeyGetterMockRecorder struct {
	mock *MockKeyGetter
}

// NewMockKeyGetter creates a new mock instance.
func NewMockKeyGetter(ctrl *gomock.Controller) *MockKeyGetter {
	mock := &MockKeyGetter{ctrl: ctrl}
	mock.recorder = &MockKeyGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeyGetter) EXPECT() *MockKeyGetterMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockKeyGetter) Get(key string) any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(any)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockKeyGetterMockRecorder) Get(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockKeyGetter)(nil).Get), key)
}

// UnmarshalKey mocks base method.
func (m *MockKeyGetter) UnmarshalKey(key string, value any, opts ...viper.DecoderConfigOption) error {
	m.ctrl.T.Helper()
	varargs := []any{key, value}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnmarshalKey", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnmarshalKey indicates an expected call of UnmarshalKey.
func (mr *MockKeyGetterMockRecorder) UnmarshalKey(key, value any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{key, value}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmarshalKey", reflect.TypeOf((*MockKeyGetter)(nil).UnmarshalKey), varargs...)
}

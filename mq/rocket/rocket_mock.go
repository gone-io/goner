// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/apache/rocketmq-clients/golang/v5 (interfaces: SimpleConsumer,Producer)
//
// Generated by this command:
//
//	mockgen -destination=rocket_mock.go -package=rocket github.com/apache/rocketmq-clients/golang/v5 SimpleConsumer,Producer
//

// Package rocket is a generated GoMock package.
package rocket

import (
	context "context"
	reflect "reflect"
	time "time"

	golang "github.com/apache/rocketmq-clients/golang/v5"
	v2 "github.com/apache/rocketmq-clients/golang/v5/protocol/v2"
	gomock "go.uber.org/mock/gomock"
)

// MockSimpleConsumer is a mock of SimpleConsumer interface.
type MockSimpleConsumer struct {
	golang.Consumer
	ctrl     *gomock.Controller
	recorder *MockSimpleConsumerMockRecorder
	isgomock struct{}
}

// MockSimpleConsumerMockRecorder is the mock recorder for MockSimpleConsumer.
type MockSimpleConsumerMockRecorder struct {
	mock *MockSimpleConsumer
}

// NewMockSimpleConsumer creates a new mock instance.
func NewMockSimpleConsumer(ctrl *gomock.Controller) *MockSimpleConsumer {
	mock := &MockSimpleConsumer{ctrl: ctrl}
	mock.recorder = &MockSimpleConsumerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSimpleConsumer) EXPECT() *MockSimpleConsumerMockRecorder {
	return m.recorder
}

// Ack mocks base method.
func (m *MockSimpleConsumer) Ack(ctx context.Context, messageView *golang.MessageView) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ack", ctx, messageView)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ack indicates an expected call of Ack.
func (mr *MockSimpleConsumerMockRecorder) Ack(ctx, messageView any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ack", reflect.TypeOf((*MockSimpleConsumer)(nil).Ack), ctx, messageView)
}

// ChangeInvisibleDuration mocks base method.
func (m *MockSimpleConsumer) ChangeInvisibleDuration(messageView *golang.MessageView, invisibleDuration time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeInvisibleDuration", messageView, invisibleDuration)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeInvisibleDuration indicates an expected call of ChangeInvisibleDuration.
func (mr *MockSimpleConsumerMockRecorder) ChangeInvisibleDuration(messageView, invisibleDuration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeInvisibleDuration", reflect.TypeOf((*MockSimpleConsumer)(nil).ChangeInvisibleDuration), messageView, invisibleDuration)
}

// ChangeInvisibleDurationAsync mocks base method.
func (m *MockSimpleConsumer) ChangeInvisibleDurationAsync(messageView *golang.MessageView, invisibleDuration time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ChangeInvisibleDurationAsync", messageView, invisibleDuration)
}

// ChangeInvisibleDurationAsync indicates an expected call of ChangeInvisibleDurationAsync.
func (mr *MockSimpleConsumerMockRecorder) ChangeInvisibleDurationAsync(messageView, invisibleDuration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeInvisibleDurationAsync", reflect.TypeOf((*MockSimpleConsumer)(nil).ChangeInvisibleDurationAsync), messageView, invisibleDuration)
}

// GetGroupName mocks base method.
func (m *MockSimpleConsumer) GetGroupName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetGroupName indicates an expected call of GetGroupName.
func (mr *MockSimpleConsumerMockRecorder) GetGroupName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupName", reflect.TypeOf((*MockSimpleConsumer)(nil).GetGroupName))
}

// GracefulStop mocks base method.
func (m *MockSimpleConsumer) GracefulStop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GracefulStop")
	ret0, _ := ret[0].(error)
	return ret0
}

// GracefulStop indicates an expected call of GracefulStop.
func (mr *MockSimpleConsumerMockRecorder) GracefulStop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GracefulStop", reflect.TypeOf((*MockSimpleConsumer)(nil).GracefulStop))
}

// Receive mocks base method.
func (m *MockSimpleConsumer) Receive(ctx context.Context, maxMessageNum int32, invisibleDuration time.Duration) ([]*golang.MessageView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Receive", ctx, maxMessageNum, invisibleDuration)
	ret0, _ := ret[0].([]*golang.MessageView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Receive indicates an expected call of Receive.
func (mr *MockSimpleConsumerMockRecorder) Receive(ctx, maxMessageNum, invisibleDuration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Receive", reflect.TypeOf((*MockSimpleConsumer)(nil).Receive), ctx, maxMessageNum, invisibleDuration)
}

// Start mocks base method.
func (m *MockSimpleConsumer) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockSimpleConsumerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockSimpleConsumer)(nil).Start))
}

// Subscribe mocks base method.
func (m *MockSimpleConsumer) Subscribe(topic string, filterExpression *golang.FilterExpression) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", topic, filterExpression)
	ret0, _ := ret[0].(error)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockSimpleConsumerMockRecorder) Subscribe(topic, filterExpression any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockSimpleConsumer)(nil).Subscribe), topic, filterExpression)
}

// Unsubscribe mocks base method.
func (m *MockSimpleConsumer) Unsubscribe(topic string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unsubscribe", topic)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unsubscribe indicates an expected call of Unsubscribe.
func (mr *MockSimpleConsumerMockRecorder) Unsubscribe(topic any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockSimpleConsumer)(nil).Unsubscribe), topic)
}

// wrapReceiveMessageRequest mocks base method.
func (m *MockSimpleConsumer) wrapReceiveMessageRequest(batchSize int, messageQueue *v2.MessageQueue, filterExpression *golang.FilterExpression, invisibleDuration time.Duration) *v2.ReceiveMessageRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "wrapReceiveMessageRequest", batchSize, messageQueue, filterExpression, invisibleDuration)
	ret0, _ := ret[0].(*v2.ReceiveMessageRequest)
	return ret0
}

// wrapReceiveMessageRequest indicates an expected call of wrapReceiveMessageRequest.
func (mr *MockSimpleConsumerMockRecorder) wrapReceiveMessageRequest(batchSize, messageQueue, filterExpression, invisibleDuration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "wrapReceiveMessageRequest", reflect.TypeOf((*MockSimpleConsumer)(nil).wrapReceiveMessageRequest), batchSize, messageQueue, filterExpression, invisibleDuration)
}

// MockProducer is a mock of Producer interface.
type MockProducer struct {
	golang.Producer
	ctrl     *gomock.Controller
	recorder *MockProducerMockRecorder
	isgomock struct{}
}

// MockProducerMockRecorder is the mock recorder for MockProducer.
type MockProducerMockRecorder struct {
	mock *MockProducer
}

// NewMockProducer creates a new mock instance.
func NewMockProducer(ctrl *gomock.Controller) *MockProducer {
	mock := &MockProducer{ctrl: ctrl}
	mock.recorder = &MockProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProducer) EXPECT() *MockProducerMockRecorder {
	return m.recorder
}

// BeginTransaction mocks base method.
func (m *MockProducer) BeginTransaction() golang.Transaction {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTransaction")
	ret0, _ := ret[0].(golang.Transaction)
	return ret0
}

// BeginTransaction indicates an expected call of BeginTransaction.
func (mr *MockProducerMockRecorder) BeginTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTransaction", reflect.TypeOf((*MockProducer)(nil).BeginTransaction))
}

// GracefulStop mocks base method.
func (m *MockProducer) GracefulStop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GracefulStop")
	ret0, _ := ret[0].(error)
	return ret0
}

// GracefulStop indicates an expected call of GracefulStop.
func (mr *MockProducerMockRecorder) GracefulStop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GracefulStop", reflect.TypeOf((*MockProducer)(nil).GracefulStop))
}

// Send mocks base method.
func (m *MockProducer) Send(arg0 context.Context, arg1 *golang.Message) ([]*golang.SendReceipt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0, arg1)
	ret0, _ := ret[0].([]*golang.SendReceipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send.
func (mr *MockProducerMockRecorder) Send(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockProducer)(nil).Send), arg0, arg1)
}

// SendAsync mocks base method.
func (m *MockProducer) SendAsync(arg0 context.Context, arg1 *golang.Message, arg2 func(context.Context, []*golang.SendReceipt, error)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendAsync", arg0, arg1, arg2)
}

// SendAsync indicates an expected call of SendAsync.
func (mr *MockProducerMockRecorder) SendAsync(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAsync", reflect.TypeOf((*MockProducer)(nil).SendAsync), arg0, arg1, arg2)
}

// SendWithTransaction mocks base method.
func (m *MockProducer) SendWithTransaction(arg0 context.Context, arg1 *golang.Message, arg2 golang.Transaction) ([]*golang.SendReceipt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendWithTransaction", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*golang.SendReceipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendWithTransaction indicates an expected call of SendWithTransaction.
func (mr *MockProducerMockRecorder) SendWithTransaction(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendWithTransaction", reflect.TypeOf((*MockProducer)(nil).SendWithTransaction), arg0, arg1, arg2)
}

// Start mocks base method.
func (m *MockProducer) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockProducerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockProducer)(nil).Start))
}

// isClient mocks base method.
func (m *MockProducer) isClient() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "isClient")
}

// isClient indicates an expected call of isClient.
func (mr *MockProducerMockRecorder) isClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isClient", reflect.TypeOf((*MockProducer)(nil).isClient))
}

// onRecoverOrphanedTransactionCommand mocks base method.
func (m *MockProducer) onRecoverOrphanedTransactionCommand(endpoints *v2.Endpoints, command *v2.RecoverOrphanedTransactionCommand) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "onRecoverOrphanedTransactionCommand", endpoints, command)
	ret0, _ := ret[0].(error)
	return ret0
}

// onRecoverOrphanedTransactionCommand indicates an expected call of onRecoverOrphanedTransactionCommand.
func (mr *MockProducerMockRecorder) onRecoverOrphanedTransactionCommand(endpoints, command any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "onRecoverOrphanedTransactionCommand", reflect.TypeOf((*MockProducer)(nil).onRecoverOrphanedTransactionCommand), endpoints, command)
}

// onVerifyMessageCommand mocks base method.
func (m *MockProducer) onVerifyMessageCommand(endpoints *v2.Endpoints, command *v2.VerifyMessageCommand) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "onVerifyMessageCommand", endpoints, command)
	ret0, _ := ret[0].(error)
	return ret0
}

// onVerifyMessageCommand indicates an expected call of onVerifyMessageCommand.
func (mr *MockProducerMockRecorder) onVerifyMessageCommand(endpoints, command any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "onVerifyMessageCommand", reflect.TypeOf((*MockProducer)(nil).onVerifyMessageCommand), endpoints, command)
}

// wrapHeartbeatRequest mocks base method.
func (m *MockProducer) wrapHeartbeatRequest() *v2.HeartbeatRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "wrapHeartbeatRequest")
	ret0, _ := ret[0].(*v2.HeartbeatRequest)
	return ret0
}

// wrapHeartbeatRequest indicates an expected call of wrapHeartbeatRequest.
func (mr *MockProducerMockRecorder) wrapHeartbeatRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "wrapHeartbeatRequest", reflect.TypeOf((*MockProducer)(nil).wrapHeartbeatRequest))
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/apolloconfig/agollo/v4/agcache (interfaces: CacheInterface)
//
// Generated by this command:
//
//	mockgen -package=apollo github.com/apolloconfig/agollo/v4/agcache CacheInterface
//

// Package apollo is a generated GoMock package.
package apollo

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCacheInterface is a mock of CacheInterface interface.
type MockCacheInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCacheInterfaceMockRecorder
	isgomock struct{}
}

// MockCacheInterfaceMockRecorder is the mock recorder for MockCacheInterface.
type MockCacheInterfaceMockRecorder struct {
	mock *MockCacheInterface
}

// NewMockCacheInterface creates a new mock instance.
func NewMockCacheInterface(ctrl *gomock.Controller) *MockCacheInterface {
	mock := &MockCacheInterface{ctrl: ctrl}
	mock.recorder = &MockCacheInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheInterface) EXPECT() *MockCacheInterfaceMockRecorder {
	return m.recorder
}

// Clear mocks base method.
func (m *MockCacheInterface) Clear() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Clear")
}

// Clear indicates an expected call of Clear.
func (mr *MockCacheInterfaceMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockCacheInterface)(nil).Clear))
}

// Del mocks base method.
func (m *MockCacheInterface) Del(key string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Del", key)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Del indicates an expected call of Del.
func (mr *MockCacheInterfaceMockRecorder) Del(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockCacheInterface)(nil).Del), key)
}

// EntryCount mocks base method.
func (m *MockCacheInterface) EntryCount() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EntryCount")
	ret0, _ := ret[0].(int64)
	return ret0
}

// EntryCount indicates an expected call of EntryCount.
func (mr *MockCacheInterfaceMockRecorder) EntryCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EntryCount", reflect.TypeOf((*MockCacheInterface)(nil).EntryCount))
}

// Get mocks base method.
func (m *MockCacheInterface) Get(key string) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCacheInterfaceMockRecorder) Get(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCacheInterface)(nil).Get), key)
}

// Range mocks base method.
func (m *MockCacheInterface) Range(f func(any, any) bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Range", f)
}

// Range indicates an expected call of Range.
func (mr *MockCacheInterfaceMockRecorder) Range(f any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Range", reflect.TypeOf((*MockCacheInterface)(nil).Range), f)
}

// Set mocks base method.
func (m *MockCacheInterface) Set(key string, value any, expireSeconds int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", key, value, expireSeconds)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockCacheInterfaceMockRecorder) Set(key, value, expireSeconds any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockCacheInterface)(nil).Set), key, value, expireSeconds)
}
